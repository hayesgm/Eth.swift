@testable import Eth
import XCTest

final class HexTests: XCTestCase {
    func testDataFromHexString() throws {
        XCTAssertEqual(Hex.dataFromHexString("0x"), Data([]))
        XCTAssertEqual(Hex.dataFromHexString("0x0"), Data([0x0]))
        XCTAssertEqual(Hex.dataFromHexString("0x00"), Data([0x0]))
        XCTAssertEqual(Hex.dataFromHexString("0x1122"), Data([0x11, 0x22]))
        XCTAssertEqual(Hex.dataFromHexString("1122"), Data([0x11, 0x22]))
        XCTAssertNil(Hex.dataFromHexString("gg"))
    }

    func testParseHexString() throws {
        XCTAssertEqual(try! Hex.parseHex("0x"), Data([]))
        XCTAssertEqual(try! Hex.parseHex("0x0"), Data([0x0]))
        XCTAssertEqual(try! Hex.parseHex("0x00"), Data([0x0]))
        XCTAssertEqual(try! Hex.parseHex("0x1122"), Data([0x11, 0x22]))
        XCTAssertEqual(try! Hex.parseHex("1122"), Data([0x11, 0x22]))
        do {
            _ = try Hex.parseHex("gg")
            XCTFail("gg: Expected error, none received")
        } catch let error as Hex.HexError {
            XCTAssertEqual(error, Hex.HexError.invalidHex("gg"))
        }
    }

    func testHexFromData() throws {
        XCTAssertEqual(Hex(Data([0x0])).data, Data([0x0]))
    }

    func testHexFromString() throws {
        XCTAssertEqual(Hex(hex: "0x"), Hex(Data([])))
        XCTAssertEqual(Hex(hex: "0x0"), Hex(Data([0x0])))
        XCTAssertEqual(Hex(hex: "0x00"), Hex(Data([0x0])))
        XCTAssertEqual(Hex(hex: "0x1122"), Hex(Data([0x11, 0x22])))
        XCTAssertEqual(Hex(hex: "1122"), Hex(Data([0x11, 0x22])))
        // TODO: Handle raise
        XCTAssertNil(Hex(hex: "gg"))
    }

    func testHexFromStringLiteral() throws {
        XCTAssertEqual(Hex("0x1122"), Hex(Data([0x11, 0x22])))
        // Uncomment to test compilation error:
        // Hex("gg")
    }

    func testHexDotDescription() {
        XCTAssertEqual(Hex("0x").description, "0x")
        XCTAssertEqual(Hex("0x0").description, "0x00")
        XCTAssertEqual(Hex("0x00").description, "0x00")
        XCTAssertEqual(Hex("0x1122").description, "0x1122")
    }

    func testHexDotHex() {
        XCTAssertEqual(Hex("0x").hex, "0x")
        XCTAssertEqual(Hex("0x0").hex, "0x00")
        XCTAssertEqual(Hex("0x00").hex, "0x00")
        XCTAssertEqual(Hex("0x1122").hex, "0x1122")
        XCTAssertEqual(Hex("1122").hex, "0x1122")
    }

    func testHexDotShortHex() {
        XCTAssertEqual(Hex("0x").shortHex, "0x0")
        XCTAssertEqual(Hex("0x0").shortHex, "0x0")
        XCTAssertEqual(Hex("0x00").shortHex, "0x0")
        XCTAssertEqual(Hex("0x1122").shortHex, "0x1122")
        XCTAssertEqual(Hex("0x0122").shortHex, "0x122")
        XCTAssertEqual(Hex("1122").shortHex, "0x1122")
    }

    func testHexBigValue() {}

    Hex("0x5af4918215610bd157600092611bde575b50606086015160a087015190604088015163ffffffff60018060a01b0360c08b01511691611a3c611a3660018060a01b038a51169561223d565b956122a3565b90604051956331be912560e01b602088015260018060a01b031660248701526044860152166064840152608483015260a482015260a48152611a7d8161152d565b60e08701519162093a8083018311610b8a5762093a809360405196611aa1886114f7565b875260018060a01b031660208701526040860152606085015201608083015260408401519060608101519060018060a01b03905116606086015160018060a01b0360c0880151169160a08801519360405195611afc876114c1565b8652602086015260408501526060840152608083015260a0820152606084015193608060018060a01b039101511690604051611b3781611512565b600681526542524944474560d01b602082015260a0604051928051602085015260208101516040850152600180831b03604082015116606085015260608101516080850152600180831b0360808201511682850152015160c083015260c08252611ba08261152d565b611ba8611d06565b9260405196611bb68861152d565b87526020870152604086015260608501526080840152600060a0840152600060c08401529190565b611bf891925060203d602011610bca57610bbb8183611563565b90386119fc565b3d9150816000823e611c118282611563565b60208183810103126110ae578051926001600160401b0384116110ae57828201601f8584010112156110ae578382015192611c4b84611584565b90611c596040519283611563565b84825283016020858786010101116110ae57611c8b6001600160601b039460809460206119d49881860192010161161e565b9250925061197f565b604051636bf9b22f60e11b8152600490fd5b6040516345f03c7560e11b8152600490fd5b604051611cc481611512565b600181528060005b60208082101561188657906060602092828501015201611ccc565b908160209103126110ae57516001600160a01b03811681036110ae5790565b60405190611d1382611512565b600882526727a32321a420a4a760c11b6020830152565b9092909160009160605b6040808601518051861015611d915760019291611d5487611d89936117ab565b5180516020809201209382519481611d75879351809286808701910161161e565b820190838201520390810184520182611563565b930192611d34565b5050925093611ebb916001600160601b0385511660018060a01b03946020968688820151169188815191012090608060608201518a815191012091015191604051938a8501957f1ccbc9b1f2687b486993ceb127e3af2322116eb4168e3c22655130c0184854a0875260408601526060850152608084015260a083015260c082015260c08152611e208161152d565b51902093611e2c61200e565b86815191012092611e3b612036565b8781519101209260405193888501957f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f87526040860152606085015260808401521660a082015260a08152611e8f816114c1565b51902060405161190160f01b9481019485526002850191909152602284019290925281604284016107c5565b51902090565b90600090815b60808401518051841015611efc57611ef26080926020611ee9876001956117ab565b510151906117ce565b9301929050611ec7565b5092509050565b611f0c90612064565b611f4560405191602092611f3c848281611f2f818301968781519384920161161e565b8101038084520182611563565b51902092612064565b90611f62604051918281611f2f818301968781519384920161161e565b5190201490565b90604051611f76816114dc565b6000815260606020820152606060408201529160005b82518110156118865781611fa082856117ab565b51511461187557600101611f8c565b90604051611fbc816114f7565b600081526000602082015260006040820152606080820152600060808201529160005b8251811015611886576001600160a01b0380611ffb83866117ab565b5151169083161461187557600101611fdf565b6040519061201b82611512565b600c82526b145d585c9ac815d85b1b195d60a21b6020830152565b6040519061204382611512565b60018252603160f81b6020830152565b908151811015611785570160200190565b9060009160005b815181101561210a576001600160f81b0319604160f81b8161208d8486612053565b51161015806120f0575b6120a5575b5060010161206b565b6120af8284612053565b51602060f891821c019060ff82116120dc579060019392911b16851a6120d58285612053565b539061209c565b634e487b7160e01b87526011600452602487fd5b50602d60f91b816121018486612053565b51161115612097565b509150565b6040519061211c826114dc565b60006040838281528260208201520152565b9061213761210f565b916040908151612146816114dc565b6002815260005b838110612226575090825192612162846114dc565b600193600181526000602082015273bd3fa81b58ba92a82136038b25adec7066af31558282015261219284611778565b5261219c83611778565b50731682ae6375c4e4a97e4b583bc394c861a46d89628151916121be836114dc565b6121058352600660208401528201526121d68361179b565b526121e08261179b565b506000835b6121f0575b50505050565b8251811015612221578161220482856117ab565b515114612213578301836121e5565b9250506118829293506117ab565b6121ea565b60209061223161210f565b8282850101520161214d565b60406122488261212e565b0180516001600160a01b0392908316156122625750511690565b61229f90604051918291638b52ceb560e01b83526004830191906040835260046040840152630434354560e41b6060840152602060808401930152565b0390fd5b6122ac8161212e565b8051909190156122c457506020015163ffffffff1690565b61229f9060405191829163bda62f2d60e01b83526004830191906040835260046040840152630434354560e41b606084015260206080840193015256fe60808060405234610016576103d3908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816392940bf9146100bd575063ae77a7081461003a57600080fd5b346100b957806003193601126100b957610052610248565b3033036100ab578390819081908190602435906001600160a01b03165af190610079610263565b9115610083578380f35b51639a367e1760e01b815260209281019290925281906100a79060248301906102c4565b0390fd5b50516306fda65d60e31b8152fd5b8280fd5b90503461021f57606036600319011261021f576100d8610248565b6024356001600160a01b038181169390929184900361024457303303610236575016825191602083019063a9059cbb60e01b82526024840152604435604484015260448352608083019267ffffffffffffffff818510818611176102235760c0820190811185821017610223578552602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a08201525161018e9392918791829182855af1610188610263565b91610304565b80519081159182156101fc575b5050156101a6578280f35b906020608492519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b819250906020918101031261021f5760200151801515810361021f57388061019b565b8380fd5b634e487b7160e01b885260418752602488fd5b6306fda65d60e31b81528590fd5b8680fd5b600435906001600160a01b038216820361025e57565b600080fd5b3d156102bf5767ffffffffffffffff903d8281116102a95760405192601f8201601f19908116603f01168401908111848210176102a95760405282523d6000602084013e565b634e487b7160e01b600052604160045260246000fd5b606090565b919082519283825260005b8481106102f0575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016102cf565b919290156103665750815115610318575090565b3b156103215790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103795750805190602001fd5b60405162461bcd60e51b8152602060048201529081906100a79060248301906102c456fea26469706673582212201263ab0b7d73b5b46eb7f69de23f7141279a89f8b053f42255265be20566bef464736f6c63430008170033a264697066735822122078a3324b4b6010f486cc3464a6bb92d8eb338fd2def96d6ba51468e939597a0764736f6c63430008170033")
}
