@testable import Geno
import XCTest

final class ContractTests: XCTestCase {
    func testDecodeContract() {
        let jsonString = """
        {
            "abi": [
                {
                    "type": "function",
                    "name": "callsInternal",
                    "inputs": [
                        {
                            "name": "x",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ],
                    "outputs": [
                        {
                            "name": "",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ],
                    "stateMutability": "pure"
                },
                {
                    "type": "function",
                    "name": "callsLibrary",
                    "inputs": [
                        {
                            "name": "x",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ],
                    "outputs": [
                        {
                            "name": "",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ],
                    "stateMutability": "pure"
                }
            ],
            "bytecode": {
                "object": "0x608060405234801561001057600080fd5b50610191806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631b9275bb1461003b578063a7942a4c14610060575b600080fd5b61004e610049366004610102565b610073565b60405190815260200160405180910390f35b61004e61006e366004610102565b6100a1565b6000610088610083836001610131565b6100bf565b610091836100bf565b61009b9190610131565b92915050565b60006100b66100b1836001610131565b6100d6565b610091836100ed565b60006100cb8280610144565b61009b906001610131565b6000600a8211156100e95750600a919050565b5090565b60006100f8826100d6565b61009b9083610144565b60006020828403121561011457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561009b5761009b61011b565b808202811582820484141761009b5761009b61011b56fea26469706673582212201417553ab6412bf684106571a631c5a72cdfb30352ea043359882e501d99f38064736f6c63430008180033",
                "sourceMap": "354:396:25:-:0;;;;;;;;;;;;;;;;;;;",
                "linkReferences": {}
            },
            "deployedBytecode": {
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80631b9275bb1461003b578063a7942a4c14610060575b600080fd5b61004e610049366004610102565b610073565b60405190815260200160405180910390f35b61004e61006e366004610102565b6100a1565b6000610088610083836001610131565b6100bf565b610091836100bf565b61009b9190610131565b92915050565b60006100b66100b1836001610131565b6100d6565b610091836100ed565b60006100cb8280610144565b61009b906001610131565b6000600a8211156100e95750600a919050565b5090565b60006100f8826100d6565b61009b9083610144565b60006020828403121561011457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561009b5761009b61011b565b808202811582820484141761009b5761009b61011b56fea26469706673582212201417553ab6412bf684106571a631c5a72cdfb30352ea043359882e501d99f38064736f6c63430008180033",
                "sourceMap": "354:396:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;479:127;;;;;;:::i;:::-;;:::i;:::-;;;345:25:35;;;333:2;318:18;479:127:25;;;;;;;612:136;;;;;;:::i;:::-;;:::i;479:127::-;536:7;580:19;593:5;:1;597;593:5;:::i;:::-;580:12;:19::i;:::-;562:15;575:1;562:12;:15::i;:::-;:37;;;;:::i;:::-;555:44;479:127;-1:-1:-1;;479:127:25:o;612:136::-;668:7;717:24;735:5;:1;739;735:5;:::i;:::-;717:17;:24::i;:::-;694:20;712:1;694:17;:20::i;375:98::-;431:7;457:5;461:1;;457:5;:::i;:::-;:9;;465:1;457:9;:::i;91:159::-;140:7;167:2;163:1;:6;159:85;;;-1:-1:-1;192:2:25;;91:159;-1:-1:-1;91:159:25:o;159:85::-;-1:-1:-1;232:1:25;91:159::o;256:94::-;305:7;335:8;341:1;335:5;:8::i;:::-;331:12;;:1;:12;:::i;14:180:35:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:35;;14:180;-1:-1:-1;14:180:35:o;381:127::-;442:10;437:3;433:20;430:1;423:31;473:4;470:1;463:15;497:4;494:1;487:15;513:125;578:9;;;599:10;;;596:36;;;612:18;;:::i;643:168::-;716:9;;;747;;764:15;;;758:22;;744:37;734:71;;785:18;;:::i",
                "linkReferences": {}
            }
        }
        """

        guard let jsonData = jsonString.data(using: .utf8) else {
            XCTFail("Failed to convert jsonString to Data")
            return
        }

        guard let contract = decodeContract(from: jsonData) else {
            XCTFail("Failed to decode JSON")
            return
        }

        // Assert ABI
        XCTAssertEqual(contract.abi.count, 2)
        XCTAssertEqual(contract.abi[0].name, "callsInternal")
        XCTAssertEqual(contract.abi[1].name, "callsLibrary")

        // Assert Bytecode
        XCTAssertEqual(contract.bytecode.object, "0x608060405234801561001057600080fd5b50610191806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631b9275bb1461003b578063a7942a4c14610060575b600080fd5b61004e610049366004610102565b610073565b60405190815260200160405180910390f35b61004e61006e366004610102565b6100a1565b6000610088610083836001610131565b6100bf565b610091836100bf565b61009b9190610131565b92915050565b60006100b66100b1836001610131565b6100d6565b610091836100ed565b60006100cb8280610144565b61009b906001610131565b6000600a8211156100e95750600a919050565b5090565b60006100f8826100d6565b61009b9083610144565b60006020828403121561011457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561009b5761009b61011b565b808202811582820484141761009b5761009b61011b56fea26469706673582212201417553ab6412bf684106571a631c5a72cdfb30352ea043359882e501d99f38064736f6c63430008180033")
    }
}
