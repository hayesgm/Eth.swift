import BigInt
import Eth
import Foundation

enum Structs {
    struct Bat {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string])
        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        var encoded: Data {
            asField.encoded
        }

        var asField: ABI.Field {
            .tuple4(.uint96(a), .uint160(b), .array(Cat.schema, c.map { $0.asField }), .string(d))
        }

        static func decode(data: Data) throws -> Bat {
            try decodeField(schema.decode(data))
        }

        static func decodeField(_ field: ABI.Field) throws -> Bat {
            switch field {
            case let .tuple4(.uint96(a), .uint160(b), .array(.tuple([.int256, .bytes, .bytes32]), c), .string(d)):
                return try Bat(a: a, b: b, c: c.map { try Cat.decodeField($0) }, d: d)
            default:
                throw ABI.FunctionError.unexpectedError("invalid decode")
            }
        }
    }

    struct Cat {
        static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])
        let ca: BigInt
        let cb: Data
        let cc: Data

        var encoded: Data {
            asField.encoded
        }

        var asField: ABI.Field {
            .tuple3(.int256(ca), .bytes(cb), .bytes32(cc))
        }

        static func decode(data: Data) throws -> Cat {
            try decodeField(schema.decode(data))
        }

        static func decodeField(_ field: ABI.Field) throws -> Cat {
            switch field {
            case let .tuple3(.int256(ca), .bytes(cb), .bytes32(cc)):
                return Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.FunctionError.unexpectedError("invalid decode")
            }
        }
    }

    static let creationCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50610852806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634a86b4f51461003b5780636fe03f9914610061575b600080fd5b61004e6100493660046104f2565b610081565b6040519081526020015b60405180910390f35b61007461006f3660046105c1565b61012d565b6040516100589190610629565b600080826020015183600001516001600160601b03166100a19190610711565b60130b905060005b83604001515181101561011957836040015181815181106100cc576100cc610743565b602002602001015160000151846040015182815181106100ee576100ee610743565b602002602001015160200151516101059190610759565b61010f9083610789565b91506001016100a9565b50610126600119826107b1565b9392505050565b604080516080810182526000808252602082015260609181018290528181019190915260008267ffffffffffffffff81111561016b5761016b6102ed565b6040519080825280602002602001820160405280156101c357816020015b6101b060405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101895790505b50905060005b8381101561027d576040518060600160405280826101e6906107ed565b81526020018267ffffffffffffffff811115610204576102046102ed565b6040519080825280601f01601f19166020018201604052801561022e576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061026a5761026a610743565b60209081029190910101526001016101c9565b506040518060800160405280856001600160601b031681526020016001866102a59190610809565b6001600160601b03166001600160a01b031681526020018281526020016040518060400160405280600581526020016468656c6c6f60d81b8152508152509150505b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610326576103266102ed565b60405290565b6040516080810167ffffffffffffffff81118282101715610326576103266102ed565b604051601f8201601f1916810167ffffffffffffffff81118282101715610378576103786102ed565b604052919050565b600067ffffffffffffffff83111561039a5761039a6102ed565b6103ad601f8401601f191660200161034f565b90508281528383830111156103c157600080fd5b828260208301376000602084830101529392505050565b600082601f8301126103e957600080fd5b8135602067ffffffffffffffff80831115610406576104066102ed565b8260051b61041583820161034f565b938452858101830193838101908886111561042f57600080fd5b84880192505b858310156104c65782358481111561044d5760008081fd5b88016060818b03601f19018113156104655760008081fd5b61046d610303565b878301358152604080840135888111156104875760008081fd5b8401603f81018e136104995760008081fd5b6104a98e8b830135848401610380565b8a8401525091909201359082015282529184019190840190610435565b98975050505050505050565b600082601f8301126104e357600080fd5b61012683833560208501610380565b60006020828403121561050457600080fd5b813567ffffffffffffffff8082111561051c57600080fd5b908301906080828603121561053057600080fd5b61053861032c565b82356001600160601b038116811461054f57600080fd5b815260208301356001600160a01b038116811461056b57600080fd5b602082015260408301358281111561058257600080fd5b61058e878286016103d8565b6040830152506060830135828111156105a657600080fd5b6105b2878286016104d2565b60608301525095945050505050565b600080604083850312156105d457600080fd5b50508035926020909101359150565b6000815180845260005b81811015610609576020818501810151868301820152016105ed565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835260a083016001600160601b038551168285015281850151604060018060a01b03821660408701526040870151915060606080606088015283835180865260c08901915060c08160051b8a01019550868501945060005b818110156106cf5760bf198a880301835285518051885288810151858a8a01526106b2868a01826105e3565b918701519887019890985296509487019491870191600101610686565b50505050505060608501519150601f198482030160808501526106f281836105e3565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821681810283169291811582850482141761073a5761073a6106fb565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b80820260008212600160ff1b84141615610775576107756106fb565b81810583148215176102e7576102e76106fb565b80820182811260008312801582168215821617156107a9576107a96106fb565b505092915050565b6000826107ce57634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156107e8576107e86106fb565b500590565b6000600160ff1b8201610802576108026106fb565b5060000390565b818103818111156102e7576102e76106fb56fea2646970667358221220365080bcec9a508cbd1d57135fc280d3f1168ffb3b54c1104c7f61b55cbc22d964736f6c63430008180033")!
    static let runtimeCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634a86b4f51461003b5780636fe03f9914610061575b600080fd5b61004e6100493660046104f2565b610081565b6040519081526020015b60405180910390f35b61007461006f3660046105c1565b61012d565b6040516100589190610629565b600080826020015183600001516001600160601b03166100a19190610711565b60130b905060005b83604001515181101561011957836040015181815181106100cc576100cc610743565b602002602001015160000151846040015182815181106100ee576100ee610743565b602002602001015160200151516101059190610759565b61010f9083610789565b91506001016100a9565b50610126600119826107b1565b9392505050565b604080516080810182526000808252602082015260609181018290528181019190915260008267ffffffffffffffff81111561016b5761016b6102ed565b6040519080825280602002602001820160405280156101c357816020015b6101b060405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101895790505b50905060005b8381101561027d576040518060600160405280826101e6906107ed565b81526020018267ffffffffffffffff811115610204576102046102ed565b6040519080825280601f01601f19166020018201604052801561022e576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061026a5761026a610743565b60209081029190910101526001016101c9565b506040518060800160405280856001600160601b031681526020016001866102a59190610809565b6001600160601b03166001600160a01b031681526020018281526020016040518060400160405280600581526020016468656c6c6f60d81b8152508152509150505b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610326576103266102ed565b60405290565b6040516080810167ffffffffffffffff81118282101715610326576103266102ed565b604051601f8201601f1916810167ffffffffffffffff81118282101715610378576103786102ed565b604052919050565b600067ffffffffffffffff83111561039a5761039a6102ed565b6103ad601f8401601f191660200161034f565b90508281528383830111156103c157600080fd5b828260208301376000602084830101529392505050565b600082601f8301126103e957600080fd5b8135602067ffffffffffffffff80831115610406576104066102ed565b8260051b61041583820161034f565b938452858101830193838101908886111561042f57600080fd5b84880192505b858310156104c65782358481111561044d5760008081fd5b88016060818b03601f19018113156104655760008081fd5b61046d610303565b878301358152604080840135888111156104875760008081fd5b8401603f81018e136104995760008081fd5b6104a98e8b830135848401610380565b8a8401525091909201359082015282529184019190840190610435565b98975050505050505050565b600082601f8301126104e357600080fd5b61012683833560208501610380565b60006020828403121561050457600080fd5b813567ffffffffffffffff8082111561051c57600080fd5b908301906080828603121561053057600080fd5b61053861032c565b82356001600160601b038116811461054f57600080fd5b815260208301356001600160a01b038116811461056b57600080fd5b602082015260408301358281111561058257600080fd5b61058e878286016103d8565b6040830152506060830135828111156105a657600080fd5b6105b2878286016104d2565b60608301525095945050505050565b600080604083850312156105d457600080fd5b50508035926020909101359150565b6000815180845260005b81811015610609576020818501810151868301820152016105ed565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835260a083016001600160601b038551168285015281850151604060018060a01b03821660408701526040870151915060606080606088015283835180865260c08901915060c08160051b8a01019550868501945060005b818110156106cf5760bf198a880301835285518051885288810151858a8a01526106b2868a01826105e3565b918701519887019890985296509487019491870191600101610686565b50505050505060608501519150601f198482030160808501526106f281836105e3565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821681810283169291811582850482141761073a5761073a6106fb565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b80820260008212600160ff1b84141615610775576107756106fb565b81810583148215176102e7576102e76106fb565b80820182811260008312801582168215821617156107a9576107a96106fb565b505092915050565b6000826107ce57634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156107e8576107e86106fb565b500590565b6000600160ff1b8201610802576108026106fb565b5060000390565b818103818111156102e7576102e76106fb56fea2646970667358221220365080bcec9a508cbd1d57135fc280d3f1168ffb3b54c1104c7f61b55cbc22d964736f6c63430008180033")!

    static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string])],
        outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> BigInt {
        let query = try acceptBatFn.encoded(with: [bat.asField])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try acceptBatFn.decode(output: result)

        let oot: BigInt
        switch decoded {
        case let .tuple1(.int256(out0)):
            oot = out0
        default:
            throw ABI.FunctionError.unexpectedError("invalid decode")
        }

        return oot
    }

    static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Bat {
        let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try buildBatFn.decode(output: result)

        let oot: Bat
        switch decoded {
        case let v0:
            oot = try Bat.decodeField(v0)
        default:
            throw ABI.FunctionError.unexpectedError("invalid decode")
        }

        return oot
    }
}
