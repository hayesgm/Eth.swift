import BigInt
import Eth
import Foundation

enum Structs {
    enum Animal {
        struct Rat: Equatable {
            static let schema: ABI.Schema = .tuple([.address])

            let a: EthAddress

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple1(.address(a))
            }

            static func decode(hex: Hex) throws -> Animal.Rat {
                try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Rat {
                switch value {
                case let .tuple1(.address(a)):
                    return try Animal.Rat(a: a)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    struct Bat: Equatable {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])

        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        let e: [BigUInt]
        let f: Cat

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple6(.uint96(a),
                    .uint160(b),
                    .array(Cat.schema, c.map {
                        $0.asValue
                    }),
                    .string(d),
                    .array(.uint256, e.map {
                        .uint256($0)
                    }),
                    f.asValue)
        }

        static func decode(hex: Hex) throws -> Bat {
            try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Bat {
            switch value {
            case let .tuple6(.uint96(a),
                             .uint160(b),
                             .array(Cat.schema, c),
                             .string(d),
                             .array(.uint256, e),
                             f):
                return try Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f))
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    struct Cat: Equatable {
        static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])

        let ca: BigInt
        let cb: Hex
        let cc: Hex

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple3(.int256(ca),
                    .bytes(cb),
                    .bytes32(cc))
        }

        static func decode(hex: Hex) throws -> Cat {
            try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Cat {
            switch value {
            case let .tuple3(.int256(ca),
                             .bytes(cb),
                             .bytes32(cc)):
                return try Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    static let creationCode: Hex = "0x608060405234801561001057600080fd5b50610d12806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636fe03f9914610046578063d7a69d4f1461006f578063eedfb21e1461009a575b600080fd5b610059610054366004610455565b6100bb565b604051610066919061052c565b60405180910390f35b61008261007d3660046106e7565b61034b565b6040516001600160a01b039091168152602001610066565b6100ad6100a83660046109d0565b6103a9565b604051908152602001610066565b6101056040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff81111561012057610120610618565b60405190808252806020026020018201604052801561017857816020015b61016560405180606001604052806000815260200160608152602001600080191681525090565b81526020019060019003908161013e5790505b50905060005b838110156102325760405180606001604052808261019b90610ae1565b81526020018267ffffffffffffffff8111156101b9576101b9610618565b6040519080825280601f01601f1916602001820160405280156101e3576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061021f5761021f610afd565b602090810291909101015260010161017e565b5060008367ffffffffffffffff81111561024e5761024e610618565b604051908082528060200260200182016040528015610277578160200160208202803683370190505b50905060005b848110156102b45761028f8180610bf7565b8282815181106102a1576102a1610afd565b602090810291909101015260010161027d565b506040518060c00160405280866001600160601b031681526020016001876102dc9190610c03565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b81525081526020018281526020018360008151811061033557610335610afd565b6020026020010151815250925050505b92915050565b6000805b825181101561039f5783600001516001600160a01b031683828151811061037857610378610afd565b60200260200101516001600160a01b0316036103975750508151610345565b60010161034f565b5060009392505050565b600080826020015183600001516001600160601b03166103c99190610c16565b60130b905060005b83604001515181101561044157836040015181815181106103f4576103f4610afd565b6020026020010151600001518460400151828151811061041657610416610afd565b6020026020010151602001515161042d9190610c48565b6104379083610c78565b91506001016103d1565b5061044e60011982610ca0565b9392505050565b6000806040838503121561046857600080fd5b50508035926020909101359150565b6000815180845260005b8181101561049d57602081850181015186830182015201610481565b506000602082860101526020601f19601f83011685010191505092915050565b8051825260006020820151606060208501526104dc6060850182610477565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561052157815187529582019590820190600101610505565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b818110156105b25760ff198886030183526105a08585516104bd565b94509285019291850191600101610584565b5050505060608501519150601f19808583030160808601526105d48284610477565b925060808601519150808584030160a08601526105f183836104f0565b925060a08601519150808584030160c08601525061060f82826104bd565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561065157610651610618565b60405290565b60405160c0810167ffffffffffffffff8111828210171561065157610651610618565b604051601f8201601f1916810167ffffffffffffffff811182821017156106a3576106a3610618565b604052919050565b6001600160a01b03811681146106c057600080fd5b50565b600067ffffffffffffffff8211156106dd576106dd610618565b5060051b60200190565b60008082840360408112156106fb57600080fd5b60208082121561070a57600080fd5b61071261062e565b9150843561071f816106ab565b8252909250838101359067ffffffffffffffff82111561073e57600080fd5b818501915085601f83011261075257600080fd5b8135610765610760826106c3565b61067a565b81815260059190911b8301820190828101908883111561078457600080fd5b938301935b828510156107ab57843561079c816106ab565b82529383019390830190610789565b80955050505050509250929050565b80356001600160601b03811681146107d157600080fd5b919050565b80356107d1816106ab565b600067ffffffffffffffff8311156107fb576107fb610618565b61080e601f8401601f191660200161067a565b905082815283838301111561082257600080fd5b828260208301376000602084830101529392505050565b60006060828403121561084b57600080fd5b6040516060810167ffffffffffffffff828210818311171561086f5761086f610618565b8160405282935084358352602085013591508082111561088e57600080fd5b508301601f810185136108a057600080fd5b6108af858235602084016107e1565b602083015250604083013560408201525092915050565b600082601f8301126108d757600080fd5b813560206108e7610760836106c3565b82815260059290921b8401810191818101908684111561090657600080fd5b8286015b8481101561094657803567ffffffffffffffff81111561092a5760008081fd5b6109388986838b0101610839565b84525091830191830161090a565b509695505050505050565b600082601f83011261096257600080fd5b61044e838335602085016107e1565b600082601f83011261098257600080fd5b81356020610992610760836106c3565b8083825260208201915060208460051b8701019350868411156109b457600080fd5b602086015b8481101561094657803583529183019183016109b9565b6000602082840312156109e257600080fd5b813567ffffffffffffffff808211156109fa57600080fd5b9083019060c08286031215610a0e57600080fd5b610a16610657565b610a1f836107ba565b8152610a2d602084016107d6565b6020820152604083013582811115610a4457600080fd5b610a50878286016108c6565b604083015250606083013582811115610a6857600080fd5b610a7487828601610951565b606083015250608083013582811115610a8c57600080fd5b610a9887828601610971565b60808301525060a083013582811115610ab057600080fd5b610abc87828601610839565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201610af657610af6610acb565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b80851115610b4e578160001904821115610b3457610b34610acb565b80851615610b4157918102915b93841c9390800290610b18565b509250929050565b600082610b6557506001610345565b81610b7257506000610345565b8160018114610b885760028114610b9257610bae565b6001915050610345565b60ff841115610ba357610ba3610acb565b50506001821b610345565b5060208310610133831016604e8410600b8410161715610bd1575081810a610345565b610bdb8383610b13565b8060001904821115610bef57610bef610acb565b029392505050565b600061044e8383610b56565b8181038181111561034557610345610acb565b6001600160a01b03828116828216818102831692918115828504821417610c3f57610c3f610acb565b50505092915050565b80820260008212600160ff1b84141615610c6457610c64610acb565b818105831482151761034557610345610acb565b8082018281126000831280158216821582161715610c9857610c98610acb565b505092915050565b600082610cbd57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610cd757610cd7610acb565b50059056fea2646970667358221220794dd21f268953b18c43628201bc3b890e1f02474e7643990b4609a5dc60b5df64736f6c63430008180033"
    static let runtimeCode: Hex = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636fe03f9914610046578063d7a69d4f1461006f578063eedfb21e1461009a575b600080fd5b610059610054366004610455565b6100bb565b604051610066919061052c565b60405180910390f35b61008261007d3660046106e7565b61034b565b6040516001600160a01b039091168152602001610066565b6100ad6100a83660046109d0565b6103a9565b604051908152602001610066565b6101056040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff81111561012057610120610618565b60405190808252806020026020018201604052801561017857816020015b61016560405180606001604052806000815260200160608152602001600080191681525090565b81526020019060019003908161013e5790505b50905060005b838110156102325760405180606001604052808261019b90610ae1565b81526020018267ffffffffffffffff8111156101b9576101b9610618565b6040519080825280601f01601f1916602001820160405280156101e3576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061021f5761021f610afd565b602090810291909101015260010161017e565b5060008367ffffffffffffffff81111561024e5761024e610618565b604051908082528060200260200182016040528015610277578160200160208202803683370190505b50905060005b848110156102b45761028f8180610bf7565b8282815181106102a1576102a1610afd565b602090810291909101015260010161027d565b506040518060c00160405280866001600160601b031681526020016001876102dc9190610c03565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b81525081526020018281526020018360008151811061033557610335610afd565b6020026020010151815250925050505b92915050565b6000805b825181101561039f5783600001516001600160a01b031683828151811061037857610378610afd565b60200260200101516001600160a01b0316036103975750508151610345565b60010161034f565b5060009392505050565b600080826020015183600001516001600160601b03166103c99190610c16565b60130b905060005b83604001515181101561044157836040015181815181106103f4576103f4610afd565b6020026020010151600001518460400151828151811061041657610416610afd565b6020026020010151602001515161042d9190610c48565b6104379083610c78565b91506001016103d1565b5061044e60011982610ca0565b9392505050565b6000806040838503121561046857600080fd5b50508035926020909101359150565b6000815180845260005b8181101561049d57602081850181015186830182015201610481565b506000602082860101526020601f19601f83011685010191505092915050565b8051825260006020820151606060208501526104dc6060850182610477565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561052157815187529582019590820190600101610505565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b818110156105b25760ff198886030183526105a08585516104bd565b94509285019291850191600101610584565b5050505060608501519150601f19808583030160808601526105d48284610477565b925060808601519150808584030160a08601526105f183836104f0565b925060a08601519150808584030160c08601525061060f82826104bd565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561065157610651610618565b60405290565b60405160c0810167ffffffffffffffff8111828210171561065157610651610618565b604051601f8201601f1916810167ffffffffffffffff811182821017156106a3576106a3610618565b604052919050565b6001600160a01b03811681146106c057600080fd5b50565b600067ffffffffffffffff8211156106dd576106dd610618565b5060051b60200190565b60008082840360408112156106fb57600080fd5b60208082121561070a57600080fd5b61071261062e565b9150843561071f816106ab565b8252909250838101359067ffffffffffffffff82111561073e57600080fd5b818501915085601f83011261075257600080fd5b8135610765610760826106c3565b61067a565b81815260059190911b8301820190828101908883111561078457600080fd5b938301935b828510156107ab57843561079c816106ab565b82529383019390830190610789565b80955050505050509250929050565b80356001600160601b03811681146107d157600080fd5b919050565b80356107d1816106ab565b600067ffffffffffffffff8311156107fb576107fb610618565b61080e601f8401601f191660200161067a565b905082815283838301111561082257600080fd5b828260208301376000602084830101529392505050565b60006060828403121561084b57600080fd5b6040516060810167ffffffffffffffff828210818311171561086f5761086f610618565b8160405282935084358352602085013591508082111561088e57600080fd5b508301601f810185136108a057600080fd5b6108af858235602084016107e1565b602083015250604083013560408201525092915050565b600082601f8301126108d757600080fd5b813560206108e7610760836106c3565b82815260059290921b8401810191818101908684111561090657600080fd5b8286015b8481101561094657803567ffffffffffffffff81111561092a5760008081fd5b6109388986838b0101610839565b84525091830191830161090a565b509695505050505050565b600082601f83011261096257600080fd5b61044e838335602085016107e1565b600082601f83011261098257600080fd5b81356020610992610760836106c3565b8083825260208201915060208460051b8701019350868411156109b457600080fd5b602086015b8481101561094657803583529183019183016109b9565b6000602082840312156109e257600080fd5b813567ffffffffffffffff808211156109fa57600080fd5b9083019060c08286031215610a0e57600080fd5b610a16610657565b610a1f836107ba565b8152610a2d602084016107d6565b6020820152604083013582811115610a4457600080fd5b610a50878286016108c6565b604083015250606083013582811115610a6857600080fd5b610a7487828601610951565b606083015250608083013582811115610a8c57600080fd5b610a9887828601610971565b60808301525060a083013582811115610ab057600080fd5b610abc87828601610839565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201610af657610af6610acb565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b80851115610b4e578160001904821115610b3457610b34610acb565b80851615610b4157918102915b93841c9390800290610b18565b509250929050565b600082610b6557506001610345565b81610b7257506000610345565b8160018114610b885760028114610b9257610bae565b6001915050610345565b60ff841115610ba357610ba3610acb565b50506001821b610345565b5060208310610133831016604e8410600b8410161715610bd1575081810a610345565b610bdb8383610b13565b8060001904821115610bef57610bef610acb565b029392505050565b600061044e8383610b56565b8181038181111561034557610345610acb565b6001600160a01b03828116828216818102831692918115828504821417610c3f57610c3f610acb565b50505092915050565b80820260008212600160ff1b84141615610c6457610c64610acb565b818105831482151761034557610345610acb565b8082018281126000831280158216821582161715610c9857610c98610acb565b505092915050565b600082610cbd57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610cd757610cd7610acb565b50059056fea2646970667358221220794dd21f268953b18c43628201bc3b890e1f02474e7643990b4609a5dc60b5df64736f6c63430008180033"

    static let errors: [ABI.Function] = []
    static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])],
        outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> BigInt {
        let query = try acceptBatFn.encoded(with: [bat.asValue])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try acceptBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.int256(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, acceptBatFn.outputTuple)
        }
    }

    static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Bat {
        let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try buildBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.tuple6(.uint96(a),
                                 .uint160(b),
                                 .array(Cat.schema, c),
                                 .string(d),
                                 .array(.uint256, e),
                                 f)):
            return try Bat(a: a, b: b, c: c.map { try Cat.decodeValue($0) }, d: d, e: e.map { $0.asBigUInt! }, f: Cat.decodeValue(f))
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, buildBatFn.outputTuple)
        }
    }

    static let lookAtRatFn = ABI.Function(
        name: "lookAtRat",
        inputs: [.tuple([.address]), .array(.address)],
        outputs: [.address]
    )

    static func lookAtRat(rat: Animal.Rat, holes: [EthAddress]) throws -> EthAddress {
        let query = try lookAtRatFn.encoded(with: [rat.asValue, .array(.address, holes.map { .address($0) })])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try lookAtRatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.address(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtRatFn.outputTuple)
        }
    }
}
