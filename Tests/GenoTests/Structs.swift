@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum Structs {
    public struct Bat: Equatable {
        public static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema, .array(.array(.bytes32))])

        public let a: BigUInt
        public let b: BigUInt
        public let c: [Cat]
        public let d: String
        public let e: [BigUInt]
        public let f: Cat
        public let g: [[Hex]]

        public init(a: BigUInt, b: BigUInt, c: [Cat], d: String, e: [BigUInt], f: Cat, g: [[Hex]]) {
            self.a = a
            self.b = b
            self.c = c
            self.d = d
            self.e = e
            self.f = f
            self.g = g
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple7(.uint96(a),
                    .uint160(b),
                    .array(Cat.schema, c.map {
                        $0.asValue
                    }),
                    .string(d),
                    .array(.uint256, e.map {
                        .uint256($0)
                    }),
                    f.asValue,
                    .array(.array(.bytes32), g.map {
                        .array(.bytes32, $0.map {
                            .bytes32($0)
                        })
                    }))
        }

        public static func decode(hex: Hex) throws -> Bat {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> Bat {
            switch value {
            case let .tuple7(.uint96(a),
                             .uint160(b),
                             .array(Cat.schema, c),
                             .string(d),
                             .array(.uint256, e),
                             f,
                             .array(.array(.bytes32), g)):
                return try Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f), g: g.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                })
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public struct Cat: Equatable {
        public static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])

        public let ca: BigInt
        public let cb: Hex
        public let cc: Hex

        public init(ca: BigInt, cb: Hex, cc: Hex) {
            self.ca = ca
            self.cb = cb
            self.cc = cc
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple3(.int256(ca),
                    .bytes(cb),
                    .bytes32(cc))
        }

        public static func decode(hex: Hex) throws -> Cat {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> Cat {
            switch value {
            case let .tuple3(.int256(ca),
                             .bytes(cb),
                             .bytes32(cc)):
                return Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public struct Dat: Equatable {
        public static let schema: ABI.Schema = .tuple([.array(.array(.bytes32)), .array(.array(.bytes32))])

        public let a: [[Hex]]
        public let b: [[Hex]]

        public init(a: [[Hex]], b: [[Hex]]) {
            self.a = a
            self.b = b
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple2(.array(.array(.bytes32), a.map {
                .array(.bytes32, $0.map {
                    .bytes32($0)
                })
            }),
            .array(.array(.bytes32), b.map {
                .array(.bytes32, $0.map {
                    .bytes32($0)
                })
            }))
        }

        public static func decode(hex: Hex) throws -> Dat {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> Dat {
            switch value {
            case let .tuple2(.array(.array(.bytes32), a),
                             .array(.array(.bytes32), b)):
                return Dat(a: a.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                }, b: b.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                })
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public enum Animal {
        public struct Goose: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string])

            public let b: BigUInt
            public let c: String

            public init(b: BigUInt, c: String) {
                self.b = b
                self.c = c
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.uint256(b),
                        .string(c))
            }

            public static func decode(hex: Hex) throws -> Animal.Goose {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Animal.Goose {
                switch value {
                case let .tuple2(.uint256(b),
                                 .string(c)):
                    return Animal.Goose(b: b, c: c)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct Moose: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256])

            public let b: BigUInt

            public init(b: BigUInt) {
                self.b = b
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple1(.uint256(b))
            }

            public static func decode(hex: Hex) throws -> Animal.Moose {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Animal.Moose {
                switch value {
                case let .tuple1(.uint256(b)):
                    return Animal.Moose(b: b)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct Rat: Equatable {
            public static let schema: ABI.Schema = .tuple([.address])

            public let a: EthAddress

            public init(a: EthAddress) {
                self.a = a
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple1(.address(a))
            }

            public static func decode(hex: Hex) throws -> Animal.Rat {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Animal.Rat {
                switch value {
                case let .tuple1(.address(a)):
                    return Animal.Rat(a: a)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public static let creationCode: Hex = "0x6080604052348015600e575f5ffd5b506125a88061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061009c575f3560e01c80636fe03f99116100645780636fe03f991461017e5780637a12339c146101ae578063ac8dd3a4146101de578063d7a69d4f146101fc578063edb2bfae1461022c5761009c565b806318b9cbc8146100a05780631eda5eff146100d05780632a1c930614610100578063314ded701461013057806358b15a541461014e575b5f5ffd5b6100ba60048036038101906100b59190610f25565b61025c565b6040516100c79190610f7b565b60405180910390f35b6100ea60048036038101906100e59190611165565b61029c565b6040516100f791906111bb565b60405180910390f35b61011a60048036038101906101159190611677565b6102d9565b60405161012791906116cd565b60405180910390f35b6101386103b2565b6040516101459190611746565b60405180910390f35b6101686004803603810190610163919061185f565b61044c565b60405161017591906118d3565b60405180910390f35b610198600480360381019061019391906118ec565b6104a1565b6040516101a59190611dd7565b60405180910390f35b6101c860048036038101906101c39190611df7565b610825565b6040516101d59190611edd565b60405180910390f35b6101e661090f565b6040516101f39190611f37565b60405180910390f35b6102166004803603810190610211919061208b565b6109e8565b60405161022391906120f4565b60405180910390f35b6102466004803603810190610241919061210d565b610a6b565b6040516102539190612179565b60405180910390f35b5f815f01515f8151811061027357610272612199565b5b60200260200101515f8151811061028d5761028c612199565b5b60200260200101519050919050565b5f815f815181106102b0576102af612199565b5b60200260200101515f815181106102ca576102c9612199565b5b60200260200101519050919050565b5f5f8260200151835f01516bffffffffffffffffffffffff166102fc91906121f3565b60130b90505f5f90505b83604001515181101561037d578360400151818151811061032a57610329612199565b5b60200260200101515f01518460400151828151811061034c5761034b612199565b5b602002602001015160200151516103639190612234565b8261036e91906122aa565b91508080600101915050610306565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe816103aa9190612318565b915050919050565b60605f600167ffffffffffffffff8111156103d0576103cf610c4b565b5b60405190808252806020026020018201604052801561040957816020015b6103f6610b6f565b8152602001906001900390816103ee5790505b509050805f8151811061041f5761041e612199565b5b60200260200101516040516020016104379190611f37565b60405160208183030381529060405291505090565b5f5f5f90505b8351811015610496578284828151811061046f5761046e612199565b5b60200260200101515f01510361048957600191505061049b565b8080600101915050610452565b505f90505b92915050565b6104a9610b88565b5f8267ffffffffffffffff8111156104c4576104c3610c4b565b5b6040519080825280602002602001820160405280156104fd57816020015b6104ea610bed565b8152602001906001900390816104e25790505b5090505f5f90505b838110156105c85760405180606001604052808261052290612380565b81526020018267ffffffffffffffff81111561054157610540610c4b565b5b6040519080825280601f01601f1916602001820160405280156105735781602001600182028036833780820191505090505b5081526020017f11223344556677889911223344556677889911223344556677889911223344558152508282815181106105b0576105af612199565b5b60200260200101819052508080600101915050610505565b505f8367ffffffffffffffff8111156105e4576105e3610c4b565b5b6040519080825280602002602001820160405280156106125781602001602082028036833780820191505090505b5090505f5f90505b8481101561065a57808161062e91906124f5565b82828151811061064157610640612199565b5b602002602001018181525050808060010191505061061a565b505f600167ffffffffffffffff81111561067757610676610c4b565b5b6040519080825280602002602001820160405280156106aa57816020015b60608152602001906001900390816106955790505b5090505f600167ffffffffffffffff8111156106c9576106c8610c4b565b5b6040519080825280602002602001820160405280156106f75781602001602082028036833780820191505090505b5090507fdeadbeef00000000000000000000000000000000000000000000000000000000815f8151811061072e5761072d612199565b5b60200260200101818152505080825f8151811061074e5761074d612199565b5b60200260200101819052506040518060e00160405280886bffffffffffffffffffffffff168152602001600189610785919061253f565b6bffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016040518060400160405280600581526020017f68656c6c6f0000000000000000000000000000000000000000000000000000008152508152602001848152602001855f8151811061080857610807612199565b5b602002602001015181526020018381525094505050505092915050565b60605f600167ffffffffffffffff81111561084357610842610c4b565b5b60405190808252806020026020018201604052801561087657816020015b60608152602001906001900390816108615790505b5090505f600167ffffffffffffffff81111561089557610894610c4b565b5b6040519080825280602002602001820160405280156108c35781602001602082028036833780820191505090505b50905083815f815181106108da576108d9612199565b5b60200260200101818152505080825f815181106108fa576108f9612199565b5b60200260200101819052508192505050919050565b610917610b6f565b5f600167ffffffffffffffff81111561093357610932610c4b565b5b60405190808252806020026020018201604052801561096c57816020015b610959610b6f565b8152602001906001900390816109515790505b5090506040518060400160405280600481526020017f5553444300000000000000000000000000000000000000000000000000000000815250815f815181106109b8576109b7612199565b5b602002602001015160200181905250805f815181106109da576109d9612199565b5b602002602001015191505090565b5f5f5f90505b8251811015610a6057835f015173ffffffffffffffffffffffffffffffffffffffff16838281518110610a2457610a23612199565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610a5357835f0151915050610a65565b80806001019150506109ee565b505f90505b92915050565b610a73610c0c565b5f600167ffffffffffffffff811115610a8f57610a8e610c4b565b5b604051908082528060200260200182016040528015610ac257816020015b6060815260200190600190039081610aad5790505b5090505f600167ffffffffffffffff811115610ae157610ae0610c4b565b5b604051908082528060200260200182016040528015610b0f5781602001602082028036833780820191505090505b50905083815f81518110610b2657610b25612199565b5b60200260200101818152505080825f81518110610b4657610b45612199565b5b602002602001018190525060405180604001604052808381526020018381525092505050919050565b60405180604001604052805f8152602001606081525090565b6040518060e001604052805f6bffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001610be0610bed565b8152602001606081525090565b60405180606001604052805f8152602001606081526020015f81525090565b604051806040016040528060608152602001606081525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c8182610c3b565b810181811067ffffffffffffffff82111715610ca057610c9f610c4b565b5b80604052505050565b5f610cb2610c26565b9050610cbe8282610c78565b919050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff821115610ce557610ce4610c4b565b5b602082029050602081019050919050565b5f5ffd5b5f67ffffffffffffffff821115610d1457610d13610c4b565b5b602082029050602081019050919050565b5f819050919050565b610d3781610d25565b8114610d41575f5ffd5b50565b5f81359050610d5281610d2e565b92915050565b5f610d6a610d6584610cfa565b610ca9565b90508083825260208201905060208402830185811115610d8d57610d8c610cf6565b5b835b81811015610db65780610da28882610d44565b845260208401935050602081019050610d8f565b5050509392505050565b5f82601f830112610dd457610dd3610cc7565b5b8135610de4848260208601610d58565b91505092915050565b5f610dff610dfa84610ccb565b610ca9565b90508083825260208201905060208402830185811115610e2257610e21610cf6565b5b835b81811015610e6957803567ffffffffffffffff811115610e4757610e46610cc7565b5b808601610e548982610dc0565b85526020850194505050602081019050610e24565b5050509392505050565b5f82601f830112610e8757610e86610cc7565b5b8135610e97848260208601610ded565b91505092915050565b5f60408284031215610eb557610eb4610c37565b5b610ebf6040610ca9565b90505f82013567ffffffffffffffff811115610ede57610edd610cc3565b5b610eea84828501610e73565b5f83015250602082013567ffffffffffffffff811115610f0d57610f0c610cc3565b5b610f1984828501610e73565b60208301525092915050565b5f60208284031215610f3a57610f39610c2f565b5b5f82013567ffffffffffffffff811115610f5757610f56610c33565b5b610f6384828501610ea0565b91505092915050565b610f7581610d25565b82525050565b5f602082019050610f8e5f830184610f6c565b92915050565b5f67ffffffffffffffff821115610fae57610fad610c4b565b5b602082029050602081019050919050565b5f67ffffffffffffffff821115610fd957610fd8610c4b565b5b602082029050602081019050919050565b5f819050919050565b610ffc81610fea565b8114611006575f5ffd5b50565b5f8135905061101781610ff3565b92915050565b5f61102f61102a84610fbf565b610ca9565b9050808382526020820190506020840283018581111561105257611051610cf6565b5b835b8181101561107b57806110678882611009565b845260208401935050602081019050611054565b5050509392505050565b5f82601f83011261109957611098610cc7565b5b81356110a984826020860161101d565b91505092915050565b5f6110c46110bf84610f94565b610ca9565b905080838252602082019050602084028301858111156110e7576110e6610cf6565b5b835b8181101561112e57803567ffffffffffffffff81111561110c5761110b610cc7565b5b8086016111198982611085565b855260208501945050506020810190506110e9565b5050509392505050565b5f82601f83011261114c5761114b610cc7565b5b813561115c8482602086016110b2565b91505092915050565b5f6020828403121561117a57611179610c2f565b5b5f82013567ffffffffffffffff81111561119757611196610c33565b5b6111a384828501611138565b91505092915050565b6111b581610fea565b82525050565b5f6020820190506111ce5f8301846111ac565b92915050565b5f6bffffffffffffffffffffffff82169050919050565b6111f4816111d4565b81146111fe575f5ffd5b50565b5f8135905061120f816111eb565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b61123d81611215565b8114611247575f5ffd5b50565b5f8135905061125881611234565b92915050565b5f67ffffffffffffffff82111561127857611277610c4b565b5b602082029050602081019050919050565b5f819050919050565b61129b81611289565b81146112a5575f5ffd5b50565b5f813590506112b681611292565b92915050565b5f5ffd5b5f67ffffffffffffffff8211156112da576112d9610c4b565b5b6112e382610c3b565b9050602081019050919050565b828183375f83830152505050565b5f61131061130b846112c0565b610ca9565b90508281526020810184848401111561132c5761132b6112bc565b5b6113378482856112f0565b509392505050565b5f82601f83011261135357611352610cc7565b5b81356113638482602086016112fe565b91505092915050565b5f6060828403121561138157611380610c37565b5b61138b6060610ca9565b90505f61139a848285016112a8565b5f83015250602082013567ffffffffffffffff8111156113bd576113bc610cc3565b5b6113c98482850161133f565b60208301525060406113dd84828501610d44565b60408301525092915050565b5f6113fb6113f68461125e565b610ca9565b9050808382526020820190506020840283018581111561141e5761141d610cf6565b5b835b8181101561146557803567ffffffffffffffff81111561144357611442610cc7565b5b808601611450898261136c565b85526020850194505050602081019050611420565b5050509392505050565b5f82601f83011261148357611482610cc7565b5b81356114938482602086016113e9565b91505092915050565b5f67ffffffffffffffff8211156114b6576114b5610c4b565b5b6114bf82610c3b565b9050602081019050919050565b5f6114de6114d98461149c565b610ca9565b9050828152602081018484840111156114fa576114f96112bc565b5b6115058482856112f0565b509392505050565b5f82601f83011261152157611520610cc7565b5b81356115318482602086016114cc565b91505092915050565b5f60e0828403121561154f5761154e610c37565b5b61155960e0610ca9565b90505f61156884828501611201565b5f83015250602061157b8482850161124a565b602083015250604082013567ffffffffffffffff81111561159f5761159e610cc3565b5b6115ab8482850161146f565b604083015250606082013567ffffffffffffffff8111156115cf576115ce610cc3565b5b6115db8482850161150d565b606083015250608082013567ffffffffffffffff8111156115ff576115fe610cc3565b5b61160b84828501611085565b60808301525060a082013567ffffffffffffffff81111561162f5761162e610cc3565b5b61163b8482850161136c565b60a08301525060c082013567ffffffffffffffff81111561165f5761165e610cc3565b5b61166b84828501610e73565b60c08301525092915050565b5f6020828403121561168c5761168b610c2f565b5b5f82013567ffffffffffffffff8111156116a9576116a8610c33565b5b6116b58482850161153a565b91505092915050565b6116c781611289565b82525050565b5f6020820190506116e05f8301846116be565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f611718826116e6565b61172281856116f0565b9350611732818560208601611700565b61173b81610c3b565b840191505092915050565b5f6020820190508181035f83015261175e818461170e565b905092915050565b5f67ffffffffffffffff8211156117805761177f610c4b565b5b602082029050602081019050919050565b5f602082840312156117a6576117a5610c37565b5b6117b06020610ca9565b90505f6117bf84828501611009565b5f8301525092915050565b5f6117dc6117d784611766565b610ca9565b905080838252602082019050602084028301858111156117ff576117fe610cf6565b5b835b8181101561182857806118148882611791565b845260208401935050602081019050611801565b5050509392505050565b5f82601f83011261184657611845610cc7565b5b81356118568482602086016117ca565b91505092915050565b5f5f6040838503121561187557611874610c2f565b5b5f83013567ffffffffffffffff81111561189257611891610c33565b5b61189e85828601611832565b92505060206118af85828601611009565b9150509250929050565b5f8115159050919050565b6118cd816118b9565b82525050565b5f6020820190506118e65f8301846118c4565b92915050565b5f5f6040838503121561190257611901610c2f565b5b5f61190f85828601611009565b925050602061192085828601611009565b9150509250929050565b611933816111d4565b82525050565b61194281611215565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61197a81611289565b82525050565b5f82825260208201905092915050565b5f61199a826116e6565b6119a48185611980565b93506119b4818560208601611700565b6119bd81610c3b565b840191505092915050565b6119d181610d25565b82525050565b5f606083015f8301516119ec5f860182611971565b5060208301518482036020860152611a048282611990565b9150506040830151611a1960408601826119c8565b508091505092915050565b5f611a2f83836119d7565b905092915050565b5f602082019050919050565b5f611a4d82611948565b611a578185611952565b935083602082028501611a6985611962565b805f5b85811015611aa45784840389528151611a858582611a24565b9450611a9083611a37565b925060208a01995050600181019050611a6c565b50829750879550505050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f611ada82611ab6565b611ae48185611ac0565b9350611af4818560208601611700565b611afd81610c3b565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611b3a81610fea565b82525050565b5f611b4b8383611b31565b60208301905092915050565b5f602082019050919050565b5f611b6d82611b08565b611b778185611b12565b9350611b8283611b22565b805f5b83811015611bb2578151611b998882611b40565b9750611ba483611b57565b925050600181019050611b85565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611c1c83836119c8565b60208301905092915050565b5f602082019050919050565b5f611c3e82611be8565b611c488185611bf2565b9350611c5383611c02565b805f5b83811015611c83578151611c6a8882611c11565b9750611c7583611c28565b925050600181019050611c56565b5085935050505092915050565b5f611c9b8383611c34565b905092915050565b5f602082019050919050565b5f611cb982611bbf565b611cc38185611bc9565b935083602082028501611cd585611bd9565b805f5b85811015611d105784840389528151611cf18582611c90565b9450611cfc83611ca3565b925060208a01995050600181019050611cd8565b50829750879550505050505092915050565b5f60e083015f830151611d375f86018261192a565b506020830151611d4a6020860182611939565b5060408301518482036040860152611d628282611a43565b91505060608301518482036060860152611d7c8282611ad0565b91505060808301518482036080860152611d968282611b63565b91505060a083015184820360a0860152611db082826119d7565b91505060c083015184820360c0860152611dca8282611caf565b9150508091505092915050565b5f6020820190508181035f830152611def8184611d22565b905092915050565b5f60208284031215611e0c57611e0b610c2f565b5b5f611e1984828501611009565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611e568383611b63565b905092915050565b5f602082019050919050565b5f611e7482611e22565b611e7e8185611e2c565b935083602082028501611e9085611e3c565b805f5b85811015611ecb5784840389528151611eac8582611e4b565b9450611eb783611e5e565b925060208a01995050600181019050611e93565b50829750879550505050505092915050565b5f6020820190508181035f830152611ef58184611e6a565b905092915050565b5f604083015f830151611f125f860182611b31565b5060208301518482036020860152611f2a8282611ad0565b9150508091505092915050565b5f6020820190508181035f830152611f4f8184611efd565b905092915050565b5f611f6182611215565b9050919050565b611f7181611f57565b8114611f7b575f5ffd5b50565b5f81359050611f8c81611f68565b92915050565b5f60208284031215611fa757611fa6610c37565b5b611fb16020610ca9565b90505f611fc084828501611f7e565b5f8301525092915050565b5f67ffffffffffffffff821115611fe557611fe4610c4b565b5b602082029050602081019050919050565b5f61200861200384611fcb565b610ca9565b9050808382526020820190506020840283018581111561202b5761202a610cf6565b5b835b8181101561205457806120408882611f7e565b84526020840193505060208101905061202d565b5050509392505050565b5f82601f83011261207257612071610cc7565b5b8135612082848260208601611ff6565b91505092915050565b5f5f604083850312156120a1576120a0610c2f565b5b5f6120ae85828601611f92565b925050602083013567ffffffffffffffff8111156120cf576120ce610c33565b5b6120db8582860161205e565b9150509250929050565b6120ee81611f57565b82525050565b5f6020820190506121075f8301846120e5565b92915050565b5f6020828403121561212257612121610c2f565b5b5f61212f84828501610d44565b91505092915050565b5f604083015f8301518482035f8601526121528282611caf565b9150506020830151848203602086015261216c8282611caf565b9150508091505092915050565b5f6020820190508181035f8301526121918184612138565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121fd82611215565b915061220883611215565b925082820261221681611215565b9150828204841483151761222d5761222c6121c6565b5b5092915050565b5f61223e82611289565b915061224983611289565b925082820261225781611289565b91507f800000000000000000000000000000000000000000000000000000000000000084145f8412161561228e5761228d6121c6565b5b82820584148315176122a3576122a26121c6565b5b5092915050565b5f6122b482611289565b91506122bf83611289565b92508282019050828112155f8312168382125f8412151617156122e5576122e46121c6565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61232282611289565b915061232d83611289565b92508261233d5761233c6122eb565b5b60015f0383147f800000000000000000000000000000000000000000000000000000000000000083141615612375576123746121c6565b5b828205905092915050565b5f61238a82611289565b91507f800000000000000000000000000000000000000000000000000000000000000082036123bc576123bb6121c6565b5b815f039050919050565b5f8160011c9050919050565b5f5f8291508390505b600185111561241b578086048111156123f7576123f66121c6565b5b60018516156124065780820291505b8081029050612414856123c6565b94506123db565b94509492505050565b5f8261243357600190506124ee565b81612440575f90506124ee565b816001811461245657600281146124605761248f565b60019150506124ee565b60ff841115612472576124716121c6565b5b8360020a915084821115612489576124886121c6565b5b506124ee565b5060208310610133831016604e8410600b84101617156124c45782820a9050838111156124bf576124be6121c6565b5b6124ee565b6124d184848460016123d2565b925090508184048111156124e8576124e76121c6565b5b81810290505b9392505050565b5f6124ff82610fea565b915061250a83610fea565b92506125377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612424565b905092915050565b5f61254982610fea565b915061255483610fea565b925082820390508181111561256c5761256b6121c6565b5b9291505056fea2646970667358221220032d2d8a7d94e471918f33a1c8e37d55a07094a30f8d356b6d8bf8cf83744fcd64736f6c634300081c0033"
    public static let runtimeCode: Hex = "0x608060405234801561000f575f5ffd5b506004361061009c575f3560e01c80636fe03f99116100645780636fe03f991461017e5780637a12339c146101ae578063ac8dd3a4146101de578063d7a69d4f146101fc578063edb2bfae1461022c5761009c565b806318b9cbc8146100a05780631eda5eff146100d05780632a1c930614610100578063314ded701461013057806358b15a541461014e575b5f5ffd5b6100ba60048036038101906100b59190610f25565b61025c565b6040516100c79190610f7b565b60405180910390f35b6100ea60048036038101906100e59190611165565b61029c565b6040516100f791906111bb565b60405180910390f35b61011a60048036038101906101159190611677565b6102d9565b60405161012791906116cd565b60405180910390f35b6101386103b2565b6040516101459190611746565b60405180910390f35b6101686004803603810190610163919061185f565b61044c565b60405161017591906118d3565b60405180910390f35b610198600480360381019061019391906118ec565b6104a1565b6040516101a59190611dd7565b60405180910390f35b6101c860048036038101906101c39190611df7565b610825565b6040516101d59190611edd565b60405180910390f35b6101e661090f565b6040516101f39190611f37565b60405180910390f35b6102166004803603810190610211919061208b565b6109e8565b60405161022391906120f4565b60405180910390f35b6102466004803603810190610241919061210d565b610a6b565b6040516102539190612179565b60405180910390f35b5f815f01515f8151811061027357610272612199565b5b60200260200101515f8151811061028d5761028c612199565b5b60200260200101519050919050565b5f815f815181106102b0576102af612199565b5b60200260200101515f815181106102ca576102c9612199565b5b60200260200101519050919050565b5f5f8260200151835f01516bffffffffffffffffffffffff166102fc91906121f3565b60130b90505f5f90505b83604001515181101561037d578360400151818151811061032a57610329612199565b5b60200260200101515f01518460400151828151811061034c5761034b612199565b5b602002602001015160200151516103639190612234565b8261036e91906122aa565b91508080600101915050610306565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe816103aa9190612318565b915050919050565b60605f600167ffffffffffffffff8111156103d0576103cf610c4b565b5b60405190808252806020026020018201604052801561040957816020015b6103f6610b6f565b8152602001906001900390816103ee5790505b509050805f8151811061041f5761041e612199565b5b60200260200101516040516020016104379190611f37565b60405160208183030381529060405291505090565b5f5f5f90505b8351811015610496578284828151811061046f5761046e612199565b5b60200260200101515f01510361048957600191505061049b565b8080600101915050610452565b505f90505b92915050565b6104a9610b88565b5f8267ffffffffffffffff8111156104c4576104c3610c4b565b5b6040519080825280602002602001820160405280156104fd57816020015b6104ea610bed565b8152602001906001900390816104e25790505b5090505f5f90505b838110156105c85760405180606001604052808261052290612380565b81526020018267ffffffffffffffff81111561054157610540610c4b565b5b6040519080825280601f01601f1916602001820160405280156105735781602001600182028036833780820191505090505b5081526020017f11223344556677889911223344556677889911223344556677889911223344558152508282815181106105b0576105af612199565b5b60200260200101819052508080600101915050610505565b505f8367ffffffffffffffff8111156105e4576105e3610c4b565b5b6040519080825280602002602001820160405280156106125781602001602082028036833780820191505090505b5090505f5f90505b8481101561065a57808161062e91906124f5565b82828151811061064157610640612199565b5b602002602001018181525050808060010191505061061a565b505f600167ffffffffffffffff81111561067757610676610c4b565b5b6040519080825280602002602001820160405280156106aa57816020015b60608152602001906001900390816106955790505b5090505f600167ffffffffffffffff8111156106c9576106c8610c4b565b5b6040519080825280602002602001820160405280156106f75781602001602082028036833780820191505090505b5090507fdeadbeef00000000000000000000000000000000000000000000000000000000815f8151811061072e5761072d612199565b5b60200260200101818152505080825f8151811061074e5761074d612199565b5b60200260200101819052506040518060e00160405280886bffffffffffffffffffffffff168152602001600189610785919061253f565b6bffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016040518060400160405280600581526020017f68656c6c6f0000000000000000000000000000000000000000000000000000008152508152602001848152602001855f8151811061080857610807612199565b5b602002602001015181526020018381525094505050505092915050565b60605f600167ffffffffffffffff81111561084357610842610c4b565b5b60405190808252806020026020018201604052801561087657816020015b60608152602001906001900390816108615790505b5090505f600167ffffffffffffffff81111561089557610894610c4b565b5b6040519080825280602002602001820160405280156108c35781602001602082028036833780820191505090505b50905083815f815181106108da576108d9612199565b5b60200260200101818152505080825f815181106108fa576108f9612199565b5b60200260200101819052508192505050919050565b610917610b6f565b5f600167ffffffffffffffff81111561093357610932610c4b565b5b60405190808252806020026020018201604052801561096c57816020015b610959610b6f565b8152602001906001900390816109515790505b5090506040518060400160405280600481526020017f5553444300000000000000000000000000000000000000000000000000000000815250815f815181106109b8576109b7612199565b5b602002602001015160200181905250805f815181106109da576109d9612199565b5b602002602001015191505090565b5f5f5f90505b8251811015610a6057835f015173ffffffffffffffffffffffffffffffffffffffff16838281518110610a2457610a23612199565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610a5357835f0151915050610a65565b80806001019150506109ee565b505f90505b92915050565b610a73610c0c565b5f600167ffffffffffffffff811115610a8f57610a8e610c4b565b5b604051908082528060200260200182016040528015610ac257816020015b6060815260200190600190039081610aad5790505b5090505f600167ffffffffffffffff811115610ae157610ae0610c4b565b5b604051908082528060200260200182016040528015610b0f5781602001602082028036833780820191505090505b50905083815f81518110610b2657610b25612199565b5b60200260200101818152505080825f81518110610b4657610b45612199565b5b602002602001018190525060405180604001604052808381526020018381525092505050919050565b60405180604001604052805f8152602001606081525090565b6040518060e001604052805f6bffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001610be0610bed565b8152602001606081525090565b60405180606001604052805f8152602001606081526020015f81525090565b604051806040016040528060608152602001606081525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c8182610c3b565b810181811067ffffffffffffffff82111715610ca057610c9f610c4b565b5b80604052505050565b5f610cb2610c26565b9050610cbe8282610c78565b919050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff821115610ce557610ce4610c4b565b5b602082029050602081019050919050565b5f5ffd5b5f67ffffffffffffffff821115610d1457610d13610c4b565b5b602082029050602081019050919050565b5f819050919050565b610d3781610d25565b8114610d41575f5ffd5b50565b5f81359050610d5281610d2e565b92915050565b5f610d6a610d6584610cfa565b610ca9565b90508083825260208201905060208402830185811115610d8d57610d8c610cf6565b5b835b81811015610db65780610da28882610d44565b845260208401935050602081019050610d8f565b5050509392505050565b5f82601f830112610dd457610dd3610cc7565b5b8135610de4848260208601610d58565b91505092915050565b5f610dff610dfa84610ccb565b610ca9565b90508083825260208201905060208402830185811115610e2257610e21610cf6565b5b835b81811015610e6957803567ffffffffffffffff811115610e4757610e46610cc7565b5b808601610e548982610dc0565b85526020850194505050602081019050610e24565b5050509392505050565b5f82601f830112610e8757610e86610cc7565b5b8135610e97848260208601610ded565b91505092915050565b5f60408284031215610eb557610eb4610c37565b5b610ebf6040610ca9565b90505f82013567ffffffffffffffff811115610ede57610edd610cc3565b5b610eea84828501610e73565b5f83015250602082013567ffffffffffffffff811115610f0d57610f0c610cc3565b5b610f1984828501610e73565b60208301525092915050565b5f60208284031215610f3a57610f39610c2f565b5b5f82013567ffffffffffffffff811115610f5757610f56610c33565b5b610f6384828501610ea0565b91505092915050565b610f7581610d25565b82525050565b5f602082019050610f8e5f830184610f6c565b92915050565b5f67ffffffffffffffff821115610fae57610fad610c4b565b5b602082029050602081019050919050565b5f67ffffffffffffffff821115610fd957610fd8610c4b565b5b602082029050602081019050919050565b5f819050919050565b610ffc81610fea565b8114611006575f5ffd5b50565b5f8135905061101781610ff3565b92915050565b5f61102f61102a84610fbf565b610ca9565b9050808382526020820190506020840283018581111561105257611051610cf6565b5b835b8181101561107b57806110678882611009565b845260208401935050602081019050611054565b5050509392505050565b5f82601f83011261109957611098610cc7565b5b81356110a984826020860161101d565b91505092915050565b5f6110c46110bf84610f94565b610ca9565b905080838252602082019050602084028301858111156110e7576110e6610cf6565b5b835b8181101561112e57803567ffffffffffffffff81111561110c5761110b610cc7565b5b8086016111198982611085565b855260208501945050506020810190506110e9565b5050509392505050565b5f82601f83011261114c5761114b610cc7565b5b813561115c8482602086016110b2565b91505092915050565b5f6020828403121561117a57611179610c2f565b5b5f82013567ffffffffffffffff81111561119757611196610c33565b5b6111a384828501611138565b91505092915050565b6111b581610fea565b82525050565b5f6020820190506111ce5f8301846111ac565b92915050565b5f6bffffffffffffffffffffffff82169050919050565b6111f4816111d4565b81146111fe575f5ffd5b50565b5f8135905061120f816111eb565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b61123d81611215565b8114611247575f5ffd5b50565b5f8135905061125881611234565b92915050565b5f67ffffffffffffffff82111561127857611277610c4b565b5b602082029050602081019050919050565b5f819050919050565b61129b81611289565b81146112a5575f5ffd5b50565b5f813590506112b681611292565b92915050565b5f5ffd5b5f67ffffffffffffffff8211156112da576112d9610c4b565b5b6112e382610c3b565b9050602081019050919050565b828183375f83830152505050565b5f61131061130b846112c0565b610ca9565b90508281526020810184848401111561132c5761132b6112bc565b5b6113378482856112f0565b509392505050565b5f82601f83011261135357611352610cc7565b5b81356113638482602086016112fe565b91505092915050565b5f6060828403121561138157611380610c37565b5b61138b6060610ca9565b90505f61139a848285016112a8565b5f83015250602082013567ffffffffffffffff8111156113bd576113bc610cc3565b5b6113c98482850161133f565b60208301525060406113dd84828501610d44565b60408301525092915050565b5f6113fb6113f68461125e565b610ca9565b9050808382526020820190506020840283018581111561141e5761141d610cf6565b5b835b8181101561146557803567ffffffffffffffff81111561144357611442610cc7565b5b808601611450898261136c565b85526020850194505050602081019050611420565b5050509392505050565b5f82601f83011261148357611482610cc7565b5b81356114938482602086016113e9565b91505092915050565b5f67ffffffffffffffff8211156114b6576114b5610c4b565b5b6114bf82610c3b565b9050602081019050919050565b5f6114de6114d98461149c565b610ca9565b9050828152602081018484840111156114fa576114f96112bc565b5b6115058482856112f0565b509392505050565b5f82601f83011261152157611520610cc7565b5b81356115318482602086016114cc565b91505092915050565b5f60e0828403121561154f5761154e610c37565b5b61155960e0610ca9565b90505f61156884828501611201565b5f83015250602061157b8482850161124a565b602083015250604082013567ffffffffffffffff81111561159f5761159e610cc3565b5b6115ab8482850161146f565b604083015250606082013567ffffffffffffffff8111156115cf576115ce610cc3565b5b6115db8482850161150d565b606083015250608082013567ffffffffffffffff8111156115ff576115fe610cc3565b5b61160b84828501611085565b60808301525060a082013567ffffffffffffffff81111561162f5761162e610cc3565b5b61163b8482850161136c565b60a08301525060c082013567ffffffffffffffff81111561165f5761165e610cc3565b5b61166b84828501610e73565b60c08301525092915050565b5f6020828403121561168c5761168b610c2f565b5b5f82013567ffffffffffffffff8111156116a9576116a8610c33565b5b6116b58482850161153a565b91505092915050565b6116c781611289565b82525050565b5f6020820190506116e05f8301846116be565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f611718826116e6565b61172281856116f0565b9350611732818560208601611700565b61173b81610c3b565b840191505092915050565b5f6020820190508181035f83015261175e818461170e565b905092915050565b5f67ffffffffffffffff8211156117805761177f610c4b565b5b602082029050602081019050919050565b5f602082840312156117a6576117a5610c37565b5b6117b06020610ca9565b90505f6117bf84828501611009565b5f8301525092915050565b5f6117dc6117d784611766565b610ca9565b905080838252602082019050602084028301858111156117ff576117fe610cf6565b5b835b8181101561182857806118148882611791565b845260208401935050602081019050611801565b5050509392505050565b5f82601f83011261184657611845610cc7565b5b81356118568482602086016117ca565b91505092915050565b5f5f6040838503121561187557611874610c2f565b5b5f83013567ffffffffffffffff81111561189257611891610c33565b5b61189e85828601611832565b92505060206118af85828601611009565b9150509250929050565b5f8115159050919050565b6118cd816118b9565b82525050565b5f6020820190506118e65f8301846118c4565b92915050565b5f5f6040838503121561190257611901610c2f565b5b5f61190f85828601611009565b925050602061192085828601611009565b9150509250929050565b611933816111d4565b82525050565b61194281611215565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61197a81611289565b82525050565b5f82825260208201905092915050565b5f61199a826116e6565b6119a48185611980565b93506119b4818560208601611700565b6119bd81610c3b565b840191505092915050565b6119d181610d25565b82525050565b5f606083015f8301516119ec5f860182611971565b5060208301518482036020860152611a048282611990565b9150506040830151611a1960408601826119c8565b508091505092915050565b5f611a2f83836119d7565b905092915050565b5f602082019050919050565b5f611a4d82611948565b611a578185611952565b935083602082028501611a6985611962565b805f5b85811015611aa45784840389528151611a858582611a24565b9450611a9083611a37565b925060208a01995050600181019050611a6c565b50829750879550505050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f611ada82611ab6565b611ae48185611ac0565b9350611af4818560208601611700565b611afd81610c3b565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611b3a81610fea565b82525050565b5f611b4b8383611b31565b60208301905092915050565b5f602082019050919050565b5f611b6d82611b08565b611b778185611b12565b9350611b8283611b22565b805f5b83811015611bb2578151611b998882611b40565b9750611ba483611b57565b925050600181019050611b85565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611c1c83836119c8565b60208301905092915050565b5f602082019050919050565b5f611c3e82611be8565b611c488185611bf2565b9350611c5383611c02565b805f5b83811015611c83578151611c6a8882611c11565b9750611c7583611c28565b925050600181019050611c56565b5085935050505092915050565b5f611c9b8383611c34565b905092915050565b5f602082019050919050565b5f611cb982611bbf565b611cc38185611bc9565b935083602082028501611cd585611bd9565b805f5b85811015611d105784840389528151611cf18582611c90565b9450611cfc83611ca3565b925060208a01995050600181019050611cd8565b50829750879550505050505092915050565b5f60e083015f830151611d375f86018261192a565b506020830151611d4a6020860182611939565b5060408301518482036040860152611d628282611a43565b91505060608301518482036060860152611d7c8282611ad0565b91505060808301518482036080860152611d968282611b63565b91505060a083015184820360a0860152611db082826119d7565b91505060c083015184820360c0860152611dca8282611caf565b9150508091505092915050565b5f6020820190508181035f830152611def8184611d22565b905092915050565b5f60208284031215611e0c57611e0b610c2f565b5b5f611e1984828501611009565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611e568383611b63565b905092915050565b5f602082019050919050565b5f611e7482611e22565b611e7e8185611e2c565b935083602082028501611e9085611e3c565b805f5b85811015611ecb5784840389528151611eac8582611e4b565b9450611eb783611e5e565b925060208a01995050600181019050611e93565b50829750879550505050505092915050565b5f6020820190508181035f830152611ef58184611e6a565b905092915050565b5f604083015f830151611f125f860182611b31565b5060208301518482036020860152611f2a8282611ad0565b9150508091505092915050565b5f6020820190508181035f830152611f4f8184611efd565b905092915050565b5f611f6182611215565b9050919050565b611f7181611f57565b8114611f7b575f5ffd5b50565b5f81359050611f8c81611f68565b92915050565b5f60208284031215611fa757611fa6610c37565b5b611fb16020610ca9565b90505f611fc084828501611f7e565b5f8301525092915050565b5f67ffffffffffffffff821115611fe557611fe4610c4b565b5b602082029050602081019050919050565b5f61200861200384611fcb565b610ca9565b9050808382526020820190506020840283018581111561202b5761202a610cf6565b5b835b8181101561205457806120408882611f7e565b84526020840193505060208101905061202d565b5050509392505050565b5f82601f83011261207257612071610cc7565b5b8135612082848260208601611ff6565b91505092915050565b5f5f604083850312156120a1576120a0610c2f565b5b5f6120ae85828601611f92565b925050602083013567ffffffffffffffff8111156120cf576120ce610c33565b5b6120db8582860161205e565b9150509250929050565b6120ee81611f57565b82525050565b5f6020820190506121075f8301846120e5565b92915050565b5f6020828403121561212257612121610c2f565b5b5f61212f84828501610d44565b91505092915050565b5f604083015f8301518482035f8601526121528282611caf565b9150506020830151848203602086015261216c8282611caf565b9150508091505092915050565b5f6020820190508181035f8301526121918184612138565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121fd82611215565b915061220883611215565b925082820261221681611215565b9150828204841483151761222d5761222c6121c6565b5b5092915050565b5f61223e82611289565b915061224983611289565b925082820261225781611289565b91507f800000000000000000000000000000000000000000000000000000000000000084145f8412161561228e5761228d6121c6565b5b82820584148315176122a3576122a26121c6565b5b5092915050565b5f6122b482611289565b91506122bf83611289565b92508282019050828112155f8312168382125f8412151617156122e5576122e46121c6565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61232282611289565b915061232d83611289565b92508261233d5761233c6122eb565b5b60015f0383147f800000000000000000000000000000000000000000000000000000000000000083141615612375576123746121c6565b5b828205905092915050565b5f61238a82611289565b91507f800000000000000000000000000000000000000000000000000000000000000082036123bc576123bb6121c6565b5b815f039050919050565b5f8160011c9050919050565b5f5f8291508390505b600185111561241b578086048111156123f7576123f66121c6565b5b60018516156124065780820291505b8081029050612414856123c6565b94506123db565b94509492505050565b5f8261243357600190506124ee565b81612440575f90506124ee565b816001811461245657600281146124605761248f565b60019150506124ee565b60ff841115612472576124716121c6565b5b8360020a915084821115612489576124886121c6565b5b506124ee565b5060208310610133831016604e8410600b84101617156124c45782820a9050838111156124bf576124be6121c6565b5b6124ee565b6124d184848460016123d2565b925090508184048111156124e8576124e76121c6565b5b81810290505b9392505050565b5f6124ff82610fea565b915061250a83610fea565b92506125377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612424565b905092915050565b5f61254982610fea565b915061255483610fea565b925082820390508181111561256c5761256b6121c6565b5b9291505056fea2646970667358221220032d2d8a7d94e471918f33a1c8e37d55a07094a30f8d356b6d8bf8cf83744fcd64736f6c634300081c0033"

    public static let JustANameError = ABI.Function(
        name: "JustAName",
        inputs: []
    )

    public static let JustOneArgError = ABI.Function(
        name: "JustOneArg",
        inputs: [.bool]
    )

    public enum RevertReason: Equatable, Error {
        case justAName
        case justOneArg(Bool)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (JustANameError, _):
            return .justAName
        case (JustOneArgError, let .tuple1(.bool(var0))):
            return .justOneArg(var0)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [JustANameError, JustOneArgError]
    public static let functions: [ABI.Function] = [acceptBatFn, acceptDatFn, acceptNestedArrayFn, anotherEmptyGooseFn, buildBatFn, buildDatFn, buildNestedArrayFn, emptyGooseFn, lookAtMooseFn, lookAtRatFn]
    public static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema, .array(.array(.bytes32))])],
        outputs: [.int256]
    )

    public static func acceptBat(bat: Bat, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<BigInt, RevertReason> {
        do {
            let query = try acceptBatFn.encoded(with: [bat.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try acceptBatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.int256(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, acceptBatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func acceptBatDecode(input: Hex) throws -> (Bat) {
        let decodedInput = try acceptBatFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple7(.uint96(a),
                                 .uint160(b),
                                 .array(Cat.schema, c),
                                 .string(d),
                                 .array(.uint256, e),
                                 f,
                                 .array(.array(.bytes32), g))):
            return try (Bat(a: a, b: b, c: c.map { try Cat.decodeValue($0) }, d: d, e: e.map { $0.asBigUInt! }, f: Cat.decodeValue(f), g: g.map { $0.asArray!.map { $0.asHex! } }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, acceptBatFn.inputTuple)
        }
    }

    public static let acceptDatFn = ABI.Function(
        name: "acceptDat",
        inputs: [.tuple([.array(.array(.bytes32)), .array(.array(.bytes32))])],
        outputs: [.bytes32]
    )

    public static func acceptDat(x: Dat, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Hex, RevertReason> {
        do {
            let query = try acceptDatFn.encoded(with: [x.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try acceptDatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bytes32(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, acceptDatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func acceptDatDecode(input: Hex) throws -> (Dat) {
        let decodedInput = try acceptDatFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple2(.array(.array(.bytes32), a),
                                 .array(.array(.bytes32), b))):
            return try (Dat(a: a.map { $0.asArray!.map { $0.asHex! } }, b: b.map { $0.asArray!.map { $0.asHex! } }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, acceptDatFn.inputTuple)
        }
    }

    public static let acceptNestedArrayFn = ABI.Function(
        name: "acceptNestedArray",
        inputs: [.array(.array(.uint256))],
        outputs: [.uint256]
    )

    public static func acceptNestedArray(arr: [[BigUInt]], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<BigUInt, RevertReason> {
        do {
            let query = try acceptNestedArrayFn.encoded(with: [.array(.array(.uint256), arr.map {
                .array(.uint256, $0.map {
                    .uint256($0)
                })
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try acceptNestedArrayFn.decode(output: result)

            switch decoded {
            case let .tuple1(.uint256(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, acceptNestedArrayFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func acceptNestedArrayDecode(input: Hex) throws -> ([[BigUInt]]) {
        let decodedInput = try acceptNestedArrayFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.array(.array(.uint256), arr)):
            return (arr.map { $0.asArray!.map { $0.asBigUInt! } })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, acceptNestedArrayFn.inputTuple)
        }
    }

    public static let anotherEmptyGooseFn = ABI.Function(
        name: "anotherEmptyGoose",
        inputs: [],
        outputs: [.bytes]
    )

    public static func anotherEmptyGoose(withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Hex, RevertReason> {
        do {
            let query = try anotherEmptyGooseFn.encoded(with: [])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try anotherEmptyGooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bytes(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, anotherEmptyGooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func anotherEmptyGooseDecode(input: Hex) throws {
        let decodedInput = try anotherEmptyGooseFn.decodeInput(input: input)
        switch decodedInput {
        case .tuple0:
            return ()
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, anotherEmptyGooseFn.inputTuple)
        }
    }

    public static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema, .array(.array(.bytes32))])]
    )

    public static func buildBat(x: BigUInt, y: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Bat, RevertReason> {
        do {
            let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try buildBatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple7(.uint96(a),
                                     .uint160(b),
                                     .array(Cat.schema, c),
                                     .string(d),
                                     .array(.uint256, e),
                                     f,
                                     .array(.array(.bytes32), g))):
                return try .success(Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f), g: g.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                }))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, buildBatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func buildBatDecode(input: Hex) throws -> (BigUInt, BigUInt) {
        let decodedInput = try buildBatFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.uint256(x), .uint256(y)):
            return (x, y)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, buildBatFn.inputTuple)
        }
    }

    public static let buildDatFn = ABI.Function(
        name: "buildDat",
        inputs: [.bytes32],
        outputs: [.tuple([.array(.array(.bytes32)), .array(.array(.bytes32))])]
    )

    public static func buildDat(x: Hex, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Dat, RevertReason> {
        do {
            let query = try buildDatFn.encoded(with: [.bytes32(x)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try buildDatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple2(.array(.array(.bytes32), a),
                                     .array(.array(.bytes32), b))):
                return .success(Dat(a: a.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                }, b: b.map {
                    $0.asArray!.map {
                        $0.asHex!
                    }
                }))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, buildDatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func buildDatDecode(input: Hex) throws -> (Hex) {
        let decodedInput = try buildDatFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.bytes32(x)):
            return x
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, buildDatFn.inputTuple)
        }
    }

    public static let buildNestedArrayFn = ABI.Function(
        name: "buildNestedArray",
        inputs: [.uint256],
        outputs: [.array(.array(.uint256))]
    )

    public static func buildNestedArray(x: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<[[BigUInt]], RevertReason> {
        do {
            let query = try buildNestedArrayFn.encoded(with: [.uint256(x)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try buildNestedArrayFn.decode(output: result)

            switch decoded {
            case let .tuple1(.array(.array(.uint256), var0)):
                return .success(var0.map {
                    $0.asArray!.map {
                        $0.asBigUInt!
                    }
                })
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, buildNestedArrayFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func buildNestedArrayDecode(input: Hex) throws -> (BigUInt) {
        let decodedInput = try buildNestedArrayFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.uint256(x)):
            return x
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, buildNestedArrayFn.inputTuple)
        }
    }

    public static let emptyGooseFn = ABI.Function(
        name: "emptyGoose",
        inputs: [],
        outputs: [.tuple([.uint256, .string])]
    )

    public static func emptyGoose(withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Animal.Goose, RevertReason> {
        do {
            let query = try emptyGooseFn.encoded(with: [])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try emptyGooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple2(.uint256(b),
                                     .string(c))):
                return .success(Animal.Goose(b: b, c: c))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, emptyGooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func emptyGooseDecode(input: Hex) throws {
        let decodedInput = try emptyGooseFn.decodeInput(input: input)
        switch decodedInput {
        case .tuple0:
            return ()
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, emptyGooseFn.inputTuple)
        }
    }

    public static let lookAtMooseFn = ABI.Function(
        name: "lookAtMoose",
        inputs: [.array(.tuple([.uint256])), .uint256],
        outputs: [.bool]
    )

    public static func lookAtMoose(moose: [Animal.Moose], m: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Bool, RevertReason> {
        do {
            let query = try lookAtMooseFn.encoded(with: [.array(Animal.Moose.schema, moose.map {
                $0.asValue
            }), .uint256(m)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try lookAtMooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bool(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtMooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func lookAtMooseDecode(input: Hex) throws -> ([Animal.Moose], BigUInt) {
        let decodedInput = try lookAtMooseFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.array(Animal.Moose.schema, moose), .uint256(m)):
            return try (moose.map { try Animal.Moose.decodeValue($0) }, m)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, lookAtMooseFn.inputTuple)
        }
    }

    public static let lookAtRatFn = ABI.Function(
        name: "lookAtRat",
        inputs: [.tuple([.address]), .array(.address)],
        outputs: [.address]
    )

    public static func lookAtRat(rat: Animal.Rat, holes: [EthAddress], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<EthAddress, RevertReason> {
        do {
            let query = try lookAtRatFn.encoded(with: [rat.asValue, .array(.address, holes.map {
                .address($0)
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try lookAtRatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.address(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtRatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func lookAtRatDecode(input: Hex) throws -> (Animal.Rat, [EthAddress]) {
        let decodedInput = try lookAtRatFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.tuple1(.address(a)), .array(.address, holes)):
            return try (Animal.Rat(a: a), holes.map { $0.asEthAddress! })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, lookAtRatFn.inputTuple)
        }
    }
}
