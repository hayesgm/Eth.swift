import BigInt
import Eth
import Foundation

enum Structs {
    struct Bat: Equatable {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])

        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        let e: [BigUInt]
        let f: Cat

        var encoded: Data {
            asField.encoded
        }

        var asField: ABI.Field {
            .tuple6(.uint96(a),
                    .uint160(b),
                    .array(Cat.schema, c.map {
                        $0.asField
                    }),
                    .string(d),
                    .array(.uint256, e.map {
                        .uint256($0)
                    }),
                    f.asField)
        }

        static func decode(data: Data) throws -> Bat {
            try decodeField(schema.decode(data))
        }

        static func decodeField(_ field: ABI.Field) throws -> Bat {
            switch field {
            case let .tuple6(.uint96(a),
                             .uint160(b),
                             .array(Cat.schema, c),
                             .string(d),
                             .array(.uint256, e),
                             f):
                return try Bat(a: a, b: b, c: c.map {
                    try Cat.decodeField($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeField(f))
            default:
                throw ABI.DecodeError.mismatchedType(field.fieldType, schema)
            }
        }
    }

    struct Cat: Equatable {
        static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])

        let ca: BigInt
        let cb: Data
        let cc: Data

        var encoded: Data {
            asField.encoded
        }

        var asField: ABI.Field {
            .tuple3(.int256(ca),
                    .bytes(cb),
                    .bytes32(cc))
        }

        static func decode(data: Data) throws -> Cat {
            try decodeField(schema.decode(data))
        }

        static func decodeField(_ field: ABI.Field) throws -> Cat {
            switch field {
            case let .tuple3(.int256(ca),
                             .bytes(cb),
                             .bytes32(cc)):
                return try Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.DecodeError.mismatchedType(field.fieldType, schema)
            }
        }
    }

    static let creationCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50610b81806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636fe03f991461003b578063eedfb21e14610064575b600080fd5b61004e6100493660046103c1565b610085565b60405161005b9190610498565b60405180910390f35b61007761007236600461083f565b610315565b60405190815260200161005b565b6100cf6040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff8111156100ea576100ea610584565b60405190808252806020026020018201604052801561014257816020015b61012f60405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101085790505b50905060005b838110156101fc5760405180606001604052808261016590610950565b81526020018267ffffffffffffffff81111561018357610183610584565b6040519080825280601f01601f1916602001820160405280156101ad576020820181803683370190505b5081526020017f11223344556677889911223344556677889911223344556677889911223344558152508282815181106101e9576101e961096c565b6020908102919091010152600101610148565b5060008367ffffffffffffffff81111561021857610218610584565b604051908082528060200260200182016040528015610241578160200160208202803683370190505b50905060005b8481101561027e576102598180610a66565b82828151811061026b5761026b61096c565b6020908102919091010152600101610247565b506040518060c00160405280866001600160601b031681526020016001876102a69190610a72565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b8152508152602001828152602001836000815181106102ff576102ff61096c565b6020026020010151815250925050505b92915050565b600080826020015183600001516001600160601b03166103359190610a85565b60130b905060005b8360400151518110156103ad57836040015181815181106103605761036061096c565b602002602001015160000151846040015182815181106103825761038261096c565b602002602001015160200151516103999190610ab7565b6103a39083610ae7565b915060010161033d565b506103ba60011982610b0f565b9392505050565b600080604083850312156103d457600080fd5b50508035926020909101359150565b6000815180845260005b81811015610409576020818501810151868301820152016103ed565b506000602082860101526020601f19601f83011685010191505092915050565b80518252600060208201516060602085015261044860608501826103e3565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561048d57815187529582019590820190600101610471565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b8181101561051e5760ff1988860301835261050c858551610429565b945092850192918501916001016104f0565b5050505060608501519150601f198085830301608086015261054082846103e3565b925060808601519150808584030160a086015261055d838361045c565b925060a08601519150808584030160c08601525061057b8282610429565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156105bd576105bd610584565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105ec576105ec610584565b604052919050565b80356001600160601b038116811461060b57600080fd5b919050565b80356001600160a01b038116811461060b57600080fd5b600067ffffffffffffffff82111561064157610641610584565b5060051b60200190565b600067ffffffffffffffff83111561066557610665610584565b610678601f8401601f19166020016105c3565b905082815283838301111561068c57600080fd5b828260208301376000602084830101529392505050565b6000606082840312156106b557600080fd5b6040516060810167ffffffffffffffff82821081831117156106d9576106d9610584565b816040528293508435835260208501359150808211156106f857600080fd5b508301601f8101851361070a57600080fd5b6107198582356020840161064b565b602083015250604083013560408201525092915050565b600082601f83011261074157600080fd5b8135602061075661075183610627565b6105c3565b82815260059290921b8401810191818101908684111561077557600080fd5b8286015b848110156107b557803567ffffffffffffffff8111156107995760008081fd5b6107a78986838b01016106a3565b845250918301918301610779565b509695505050505050565b600082601f8301126107d157600080fd5b6103ba8383356020850161064b565b600082601f8301126107f157600080fd5b8135602061080161075183610627565b8083825260208201915060208460051b87010193508684111561082357600080fd5b602086015b848110156107b55780358352918301918301610828565b60006020828403121561085157600080fd5b813567ffffffffffffffff8082111561086957600080fd5b9083019060c0828603121561087d57600080fd5b61088561059a565b61088e836105f4565b815261089c60208401610610565b60208201526040830135828111156108b357600080fd5b6108bf87828601610730565b6040830152506060830135828111156108d757600080fd5b6108e3878286016107c0565b6060830152506080830135828111156108fb57600080fd5b610907878286016107e0565b60808301525060a08301358281111561091f57600080fd5b61092b878286016106a3565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82016109655761096561093a565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b808511156109bd5781600019048211156109a3576109a361093a565b808516156109b057918102915b93841c9390800290610987565b509250929050565b6000826109d45750600161030f565b816109e15750600061030f565b81600181146109f75760028114610a0157610a1d565b600191505061030f565b60ff841115610a1257610a1261093a565b50506001821b61030f565b5060208310610133831016604e8410600b8410161715610a40575081810a61030f565b610a4a8383610982565b8060001904821115610a5e57610a5e61093a565b029392505050565b60006103ba83836109c5565b8181038181111561030f5761030f61093a565b6001600160a01b03828116828216818102831692918115828504821417610aae57610aae61093a565b50505092915050565b80820260008212600160ff1b84141615610ad357610ad361093a565b818105831482151761030f5761030f61093a565b8082018281126000831280158216821582161715610b0757610b0761093a565b505092915050565b600082610b2c57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610b4657610b4661093a565b50059056fea2646970667358221220324ab779eddb58dbaeaaadc5cbd516ba4c7f42f4fb6f1ba14d4ab7e217d20baa64736f6c63430008180033")!
    static let runtimeCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50600436106100365760003560e01c80636fe03f991461003b578063eedfb21e14610064575b600080fd5b61004e6100493660046103c1565b610085565b60405161005b9190610498565b60405180910390f35b61007761007236600461083f565b610315565b60405190815260200161005b565b6100cf6040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff8111156100ea576100ea610584565b60405190808252806020026020018201604052801561014257816020015b61012f60405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101085790505b50905060005b838110156101fc5760405180606001604052808261016590610950565b81526020018267ffffffffffffffff81111561018357610183610584565b6040519080825280601f01601f1916602001820160405280156101ad576020820181803683370190505b5081526020017f11223344556677889911223344556677889911223344556677889911223344558152508282815181106101e9576101e961096c565b6020908102919091010152600101610148565b5060008367ffffffffffffffff81111561021857610218610584565b604051908082528060200260200182016040528015610241578160200160208202803683370190505b50905060005b8481101561027e576102598180610a66565b82828151811061026b5761026b61096c565b6020908102919091010152600101610247565b506040518060c00160405280866001600160601b031681526020016001876102a69190610a72565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b8152508152602001828152602001836000815181106102ff576102ff61096c565b6020026020010151815250925050505b92915050565b600080826020015183600001516001600160601b03166103359190610a85565b60130b905060005b8360400151518110156103ad57836040015181815181106103605761036061096c565b602002602001015160000151846040015182815181106103825761038261096c565b602002602001015160200151516103999190610ab7565b6103a39083610ae7565b915060010161033d565b506103ba60011982610b0f565b9392505050565b600080604083850312156103d457600080fd5b50508035926020909101359150565b6000815180845260005b81811015610409576020818501810151868301820152016103ed565b506000602082860101526020601f19601f83011685010191505092915050565b80518252600060208201516060602085015261044860608501826103e3565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561048d57815187529582019590820190600101610471565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b8181101561051e5760ff1988860301835261050c858551610429565b945092850192918501916001016104f0565b5050505060608501519150601f198085830301608086015261054082846103e3565b925060808601519150808584030160a086015261055d838361045c565b925060a08601519150808584030160c08601525061057b8282610429565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156105bd576105bd610584565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105ec576105ec610584565b604052919050565b80356001600160601b038116811461060b57600080fd5b919050565b80356001600160a01b038116811461060b57600080fd5b600067ffffffffffffffff82111561064157610641610584565b5060051b60200190565b600067ffffffffffffffff83111561066557610665610584565b610678601f8401601f19166020016105c3565b905082815283838301111561068c57600080fd5b828260208301376000602084830101529392505050565b6000606082840312156106b557600080fd5b6040516060810167ffffffffffffffff82821081831117156106d9576106d9610584565b816040528293508435835260208501359150808211156106f857600080fd5b508301601f8101851361070a57600080fd5b6107198582356020840161064b565b602083015250604083013560408201525092915050565b600082601f83011261074157600080fd5b8135602061075661075183610627565b6105c3565b82815260059290921b8401810191818101908684111561077557600080fd5b8286015b848110156107b557803567ffffffffffffffff8111156107995760008081fd5b6107a78986838b01016106a3565b845250918301918301610779565b509695505050505050565b600082601f8301126107d157600080fd5b6103ba8383356020850161064b565b600082601f8301126107f157600080fd5b8135602061080161075183610627565b8083825260208201915060208460051b87010193508684111561082357600080fd5b602086015b848110156107b55780358352918301918301610828565b60006020828403121561085157600080fd5b813567ffffffffffffffff8082111561086957600080fd5b9083019060c0828603121561087d57600080fd5b61088561059a565b61088e836105f4565b815261089c60208401610610565b60208201526040830135828111156108b357600080fd5b6108bf87828601610730565b6040830152506060830135828111156108d757600080fd5b6108e3878286016107c0565b6060830152506080830135828111156108fb57600080fd5b610907878286016107e0565b60808301525060a08301358281111561091f57600080fd5b61092b878286016106a3565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82016109655761096561093a565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b808511156109bd5781600019048211156109a3576109a361093a565b808516156109b057918102915b93841c9390800290610987565b509250929050565b6000826109d45750600161030f565b816109e15750600061030f565b81600181146109f75760028114610a0157610a1d565b600191505061030f565b60ff841115610a1257610a1261093a565b50506001821b61030f565b5060208310610133831016604e8410600b8410161715610a40575081810a61030f565b610a4a8383610982565b8060001904821115610a5e57610a5e61093a565b029392505050565b60006103ba83836109c5565b8181038181111561030f5761030f61093a565b6001600160a01b03828116828216818102831692918115828504821417610aae57610aae61093a565b50505092915050565b80820260008212600160ff1b84141615610ad357610ad361093a565b818105831482151761030f5761030f61093a565b8082018281126000831280158216821582161715610b0757610b0761093a565b505092915050565b600082610b2c57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610b4657610b4661093a565b50059056fea2646970667358221220324ab779eddb58dbaeaaadc5cbd516ba4c7f42f4fb6f1ba14d4ab7e217d20baa64736f6c63430008180033")!

    static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])],
        outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> BigInt {
        let query = try acceptBatFn.encoded(with: [bat.asField])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try acceptBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.int256(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.fieldType, acceptBatFn.outputTuple)
        }
    }

    static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Bat {
        let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try buildBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.tuple6(.uint96(a),
                                 .uint160(b),
                                 .array(Cat.schema, c),
                                 .string(d),
                                 .array(.uint256, e),
                                 f)):
            return try Bat(a: a, b: b, c: c.map { try Cat.decodeField($0) }, d: d, e: e.map { $0.asBigUInt! }, f: Cat.decodeField(f))
        default:
            throw ABI.DecodeError.mismatchedType(decoded.fieldType, buildBatFn.outputTuple)
        }
    }
}
