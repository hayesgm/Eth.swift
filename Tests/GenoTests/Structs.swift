import Foundation
import BigInt
import Eth

struct Structs {
    struct Bat {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string, .array(uint256)])
        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        let e: [BigUInt]
        var encoded: Data = .tuple5(.uint96(a), .uint160(b), .array(.tuple([.int256, .bytes, .bytes32]), c), .string(d), .array(uint256, e)).encoded



        static func decode(data: Data) throws -> Bat {
let decoded = try schema.decode(data)
switch decoded {
case let .tuple5(.uint96(a), .uint160(b), .array(.tuple([.int256, .bytes, .bytes32]), c), .string(d), .array(uint256, e)):
    return Bat(a: a, b: b, c: c, d: d, e: e)
default:
    throw ABI.FunctionError.unexpectedError("invalid decode")
}
        }

        }
    struct Cat {
        static let schema: ABI.Schema = .array(.tuple([.int256, .bytes, .bytes32]))
        let ca: BigInt
        let cb: Data
        let cc: Data
        var encoded: Data = .array(.tuple([.int256, .bytes, .bytes32]), c).encoded



        static func decode(data: Data) throws -> [Cat] {
let decoded = try schema.decode(data)
switch decoded {
case let .array(.tuple([.int256, .bytes, .bytes32]), c):
    return .array(.tuple([.int256(ca), .bytes(cb), .bytes32(cc)]))
default:
    throw ABI.FunctionError.unexpectedError("invalid decode")
}
        }

        }
    static let creationCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50610976806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636e4738bd1461003b5780636fe03f9914610061575b600080fd5b61004e6100493660046105b3565b610081565b6040519081526020015b60405180910390f35b61007461006f36600461068a565b61012d565b604051610058919061072e565b600080826020015183600001516001600160601b03166100a19190610835565b60130b905060005b83604001515181101561011957836040015181815181106100cc576100cc610867565b602002602001015160000151846040015182815181106100ee576100ee610867565b60200260200101516020015151610105919061087d565b61010f90836108ad565b91506001016100a9565b50610126600119826108d5565b9392505050565b6040805160a081018252600080825260208201526060918101829052818101829052608081019190915260008267ffffffffffffffff81111561017257610172610302565b6040519080825280602002602001820160405280156101ca57816020015b6101b760405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101905790505b50905060005b83811015610284576040518060600160405280826101ed90610911565b81526020018267ffffffffffffffff81111561020b5761020b610302565b6040519080825280601f01601f191660200182016040528015610235576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061027157610271610867565b60209081029190910101526001016101d0565b50604080516000815260c0810182526001600160601b03861660208201908152909182016102b360018861092d565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b815250815260200182815250925050505b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561033b5761033b610302565b60405290565b60405160a0810167ffffffffffffffff8111828210171561033b5761033b610302565b604051601f8201601f1916810167ffffffffffffffff8111828210171561038d5761038d610302565b604052919050565b80356001600160601b03811681146103ac57600080fd5b919050565b80356001600160a01b03811681146103ac57600080fd5b600067ffffffffffffffff8211156103e2576103e2610302565b5060051b60200190565b600067ffffffffffffffff83111561040657610406610302565b610419601f8401601f1916602001610364565b905082815283838301111561042d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261045557600080fd5b8135602061046a610465836103c8565b610364565b82815260059290921b8401810191818101908684111561048957600080fd5b8286015b8481101561052957803567ffffffffffffffff808211156104ae5760008081fd5b908801906060828b03601f19018113156104c85760008081fd5b6104d0610318565b878401358152604080850135848111156104ea5760008081fd5b85019350603f84018d136104fe5760008081fd5b61050e8d8a8601358387016103ec565b8983015291909301359083015250835291830191830161048d565b509695505050505050565b600082601f83011261054557600080fd5b610126838335602085016103ec565b600082601f83011261056557600080fd5b81356020610575610465836103c8565b8083825260208201915060208460051b87010193508684111561059757600080fd5b602086015b84811015610529578035835291830191830161059c565b6000602082840312156105c557600080fd5b813567ffffffffffffffff808211156105dd57600080fd5b9083019060a082860312156105f157600080fd5b6105f9610341565b61060283610395565b8152610610602084016103b1565b602082015260408301358281111561062757600080fd5b61063387828601610444565b60408301525060608301358281111561064b57600080fd5b61065787828601610534565b60608301525060808301358281111561066f57600080fd5b61067b87828601610554565b60808301525095945050505050565b6000806040838503121561069d57600080fd5b50508035926020909101359150565b6000815180845260005b818110156106d2576020818501810151868301820152016106b6565b506000602082860101526020601f19601f83011685010191505092915050565b60008151808452602080850194506020840160005b8381101561072357815187529582019590820190600101610707565b509495945050505050565b6000602080835260c083016001600160601b038551168285015281850151604060018060a01b038216604087015260408701519150606060a0606088015283835180865260e08901915060e08160051b8a01019550868501945060005b818110156107d45760df198a880301835285518051885288810151858a8a01526107b7868a01826106ac565b91870151988701989098529650948701949187019160010161078b565b50505050505060608501519150601f19808583030160808601526107f882846106ac565b925060808601519150808584030160a08601525061081682826106f2565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821681810283169291811582850482141761085e5761085e61081f565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b80820260008212600160ff1b841416156108995761089961081f565b81810583148215176102fc576102fc61081f565b80820182811260008312801582168215821617156108cd576108cd61081f565b505092915050565b6000826108f257634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561090c5761090c61081f565b500590565b6000600160ff1b82016109265761092661081f565b5060000390565b818103818111156102fc576102fc61081f56fea2646970667358221220065a2fdf93e6ee220264efa51f630437359318905e669fdd0fd647c42ad21e1264736f6c63430008180033")!
    static let runtimeCode: Data = Hex.parseHex("0x608060405234801561001057600080fd5b50600436106100365760003560e01c80636e4738bd1461003b5780636fe03f9914610061575b600080fd5b61004e6100493660046105b3565b610081565b6040519081526020015b60405180910390f35b61007461006f36600461068a565b61012d565b604051610058919061072e565b600080826020015183600001516001600160601b03166100a19190610835565b60130b905060005b83604001515181101561011957836040015181815181106100cc576100cc610867565b602002602001015160000151846040015182815181106100ee576100ee610867565b60200260200101516020015151610105919061087d565b61010f90836108ad565b91506001016100a9565b50610126600119826108d5565b9392505050565b6040805160a081018252600080825260208201526060918101829052818101829052608081019190915260008267ffffffffffffffff81111561017257610172610302565b6040519080825280602002602001820160405280156101ca57816020015b6101b760405180606001604052806000815260200160608152602001600080191681525090565b8152602001906001900390816101905790505b50905060005b83811015610284576040518060600160405280826101ed90610911565b81526020018267ffffffffffffffff81111561020b5761020b610302565b6040519080825280601f01601f191660200182016040528015610235576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061027157610271610867565b60209081029190910101526001016101d0565b50604080516000815260c0810182526001600160601b03861660208201908152909182016102b360018861092d565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b815250815260200182815250925050505b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561033b5761033b610302565b60405290565b60405160a0810167ffffffffffffffff8111828210171561033b5761033b610302565b604051601f8201601f1916810167ffffffffffffffff8111828210171561038d5761038d610302565b604052919050565b80356001600160601b03811681146103ac57600080fd5b919050565b80356001600160a01b03811681146103ac57600080fd5b600067ffffffffffffffff8211156103e2576103e2610302565b5060051b60200190565b600067ffffffffffffffff83111561040657610406610302565b610419601f8401601f1916602001610364565b905082815283838301111561042d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261045557600080fd5b8135602061046a610465836103c8565b610364565b82815260059290921b8401810191818101908684111561048957600080fd5b8286015b8481101561052957803567ffffffffffffffff808211156104ae5760008081fd5b908801906060828b03601f19018113156104c85760008081fd5b6104d0610318565b878401358152604080850135848111156104ea5760008081fd5b85019350603f84018d136104fe5760008081fd5b61050e8d8a8601358387016103ec565b8983015291909301359083015250835291830191830161048d565b509695505050505050565b600082601f83011261054557600080fd5b610126838335602085016103ec565b600082601f83011261056557600080fd5b81356020610575610465836103c8565b8083825260208201915060208460051b87010193508684111561059757600080fd5b602086015b84811015610529578035835291830191830161059c565b6000602082840312156105c557600080fd5b813567ffffffffffffffff808211156105dd57600080fd5b9083019060a082860312156105f157600080fd5b6105f9610341565b61060283610395565b8152610610602084016103b1565b602082015260408301358281111561062757600080fd5b61063387828601610444565b60408301525060608301358281111561064b57600080fd5b61065787828601610534565b60608301525060808301358281111561066f57600080fd5b61067b87828601610554565b60808301525095945050505050565b6000806040838503121561069d57600080fd5b50508035926020909101359150565b6000815180845260005b818110156106d2576020818501810151868301820152016106b6565b506000602082860101526020601f19601f83011685010191505092915050565b60008151808452602080850194506020840160005b8381101561072357815187529582019590820190600101610707565b509495945050505050565b6000602080835260c083016001600160601b038551168285015281850151604060018060a01b038216604087015260408701519150606060a0606088015283835180865260e08901915060e08160051b8a01019550868501945060005b818110156107d45760df198a880301835285518051885288810151858a8a01526107b7868a01826106ac565b91870151988701989098529650948701949187019160010161078b565b50505050505060608501519150601f19808583030160808601526107f882846106ac565b925060808601519150808584030160a08601525061081682826106f2565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821681810283169291811582850482141761085e5761085e61081f565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b80820260008212600160ff1b841416156108995761089961081f565b81810583148215176102fc576102fc61081f565b80820182811260008312801582168215821617156108cd576108cd61081f565b505092915050565b6000826108f257634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561090c5761090c61081f565b500590565b6000600160ff1b82016109265761092661081f565b5060000390565b818103818111156102fc576102fc61081f56fea2646970667358221220065a2fdf93e6ee220264efa51f630437359318905e669fdd0fd647c42ad21e1264736f6c63430008180033")!

    static let acceptBatFn = ABI.Function(
            name: "acceptBat",
            inputs: [.tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string, .array(uint256)])],
            outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> BigInt {
        let query = try acceptBatFn.encoded(with: [.tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string, .array(uint256)])(bat)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try acceptBatFn.decode(output: result)

        let oot : BigInt
        switch decoded {
        case let .tuple1(.int256(out0)):
            oot = out0
        default:
            throw ABI.FunctionError.unexpectedError("invalid decode")
        }

        return oot
    }

    static let buildBatFn = ABI.Function(
            name: "buildBat",
            inputs: [.uint256, .uint256],
            outputs: [.tuple([.uint96, .uint160, .array(.tuple([.int256, .bytes, .bytes32])), .string, .array(uint256)])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Bat {
        let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query)
        let decoded = try buildBatFn.decode(output: result)

        let oot : Bat
        switch decoded {
        case let .tuple1(.tuple5(.uint96(a), .uint160(b), .array(.tuple([.int256, .bytes, .bytes32]), c), .string(d), .array(uint256, e))):
            oot = Bat(a: a, b: b, c: c, d: d, e: e)
        default:
            throw ABI.FunctionError.unexpectedError("invalid decode")
        }

        return oot
    }

    }