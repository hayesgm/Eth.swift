import BigInt
import Eth
import Foundation

enum Structs {
    struct Bat: Equatable {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])

        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        let e: [BigUInt]
        let f: Cat

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple6(.uint96(a),
                    .uint160(b),
                    .array(Cat.schema, c.map {
                        $0.asValue
                    }),
                    .string(d),
                    .array(.uint256, e.map {
                        .uint256($0)
                    }),
                    f.asValue)
        }

        static func decode(hex: Hex) throws -> Bat {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Bat {
            switch value {
            case let .tuple6(.uint96(a),
                             .uint160(b),
                             .array(Cat.schema, c),
                             .string(d),
                             .array(.uint256, e),
                             f):
                return try Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f))
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    struct Cat: Equatable {
        static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])

        let ca: BigInt
        let cb: Hex
        let cc: Hex

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple3(.int256(ca),
                    .bytes(cb),
                    .bytes32(cc))
        }

        static func decode(hex: Hex) throws -> Cat {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Cat {
            switch value {
            case let .tuple3(.int256(ca),
                             .bytes(cb),
                             .bytes32(cc)):
                return Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    enum Animal {
        struct Goose: Equatable {
            static let schema: ABI.Schema = .tuple([.uint256, .string])

            let b: BigUInt
            let c: String

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple2(.uint256(b),
                        .string(c))
            }

            static func decode(hex: Hex) throws -> Animal.Goose {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Goose {
                switch value {
                case let .tuple2(.uint256(b),
                                 .string(c)):
                    return Animal.Goose(b: b, c: c)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        struct Moose: Equatable {
            static let schema: ABI.Schema = .tuple([.uint256])

            let b: BigUInt

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple1(.uint256(b))
            }

            static func decode(hex: Hex) throws -> Animal.Moose {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Moose {
                switch value {
                case let .tuple1(.uint256(b)):
                    return Animal.Moose(b: b)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        struct Rat: Equatable {
            static let schema: ABI.Schema = .tuple([.address])

            let a: EthAddress

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple1(.address(a))
            }

            static func decode(hex: Hex) throws -> Animal.Rat {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Rat {
                switch value {
                case let .tuple1(.address(a)):
                    return Animal.Rat(a: a)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    static let creationCode: Hex = ""
    static let runtimeCode: Hex = ""

    static let JustANameError = ABI.Function(
        name: "JustAName",
        inputs: []
    )

    static let JustOneArgError = ABI.Function(
        name: "JustOneArg",
        inputs: [.bool]
    )

    enum RevertReason: Equatable, Error {
        case justAName
        case justOneArg(Bool)
        case unknownRevert(String, String)
    }

    static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (JustANameError, _):
            return .justAName
        case (JustOneArgError, let .tuple1(.bool(var0))):
            return .justOneArg(var0)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    static let errors: [ABI.Function] = [JustANameError, JustOneArgError]
    static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])],
        outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> Result<BigInt, RevertReason> {
        do {
            let query = try acceptBatFn.encoded(with: [bat.asValue])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try acceptBatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.int256(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, acceptBatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    static let anotherEmptyGooseFn = ABI.Function(
        name: "anotherEmptyGoose",
        inputs: [],
        outputs: [.bytes]
    )

    static func anotherEmptyGoose() throws -> Result<Hex, RevertReason> {
        do {
            let query = try anotherEmptyGooseFn.encoded(with: [])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try anotherEmptyGooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bytes(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, anotherEmptyGooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Result<Bat, RevertReason> {
        do {
            let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try buildBatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple6(.uint96(a),
                                     .uint160(b),
                                     .array(Cat.schema, c),
                                     .string(d),
                                     .array(.uint256, e),
                                     f)):
                return try .success(Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f)))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, buildBatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    static let emptyGooseFn = ABI.Function(
        name: "emptyGoose",
        inputs: [],
        outputs: [.tuple([.uint256, .string])]
    )

    static func emptyGoose() throws -> Result<Animal.Goose, RevertReason> {
        do {
            let query = try emptyGooseFn.encoded(with: [])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try emptyGooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple2(.uint256(b),
                                     .string(c))):
                return .success(Animal.Goose(b: b, c: c))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, emptyGooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    static let lookAtMooseFn = ABI.Function(
        name: "lookAtMoose",
        inputs: [.array(.tuple([.uint256])), .uint256],
        outputs: [.bool]
    )

    static func lookAtMoose(moose: [Animal.Moose], m: BigUInt) throws -> Result<Bool, RevertReason> {
        do {
            let query = try lookAtMooseFn.encoded(with: [.array(Animal.Moose.schema, moose.map {
                $0.asValue
            }), .uint256(m)])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try lookAtMooseFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bool(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtMooseFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    static let lookAtRatFn = ABI.Function(
        name: "lookAtRat",
        inputs: [.tuple([.address]), .array(.address)],
        outputs: [.address]
    )

    static func lookAtRat(rat: Animal.Rat, holes: [EthAddress]) throws -> Result<EthAddress, RevertReason> {
        do {
            let query = try lookAtRatFn.encoded(with: [rat.asValue, .array(.address, holes.map {
                .address($0)
            })])
            let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
            let decoded = try lookAtRatFn.decode(output: result)

            switch decoded {
            case let .tuple1(.address(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtRatFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }
}
