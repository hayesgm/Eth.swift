import BigInt
import Eth
import Foundation

enum Structs {
    struct Bat: Equatable {
        static let schema: ABI.Schema = .tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])

        let a: BigUInt
        let b: BigUInt
        let c: [Cat]
        let d: String
        let e: [BigUInt]
        let f: Cat

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple6(.uint96(a),
                    .uint160(b),
                    .array(Cat.schema, c.map {
                        $0.asValue
                    }),
                    .string(d),
                    .array(.uint256, e.map {
                        .uint256($0)
                    }),
                    f.asValue)
        }

        static func decode(hex: Hex) throws -> Bat {
            try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Bat {
            switch value {
            case let .tuple6(.uint96(a),
                             .uint160(b),
                             .array(Cat.schema, c),
                             .string(d),
                             .array(.uint256, e),
                             f):
                return try Bat(a: a, b: b, c: c.map {
                    try Cat.decodeValue($0)
                }, d: d, e: e.map {
                    $0.asBigUInt!
                }, f: Cat.decodeValue(f))
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    struct Cat: Equatable {
        static let schema: ABI.Schema = .tuple([.int256, .bytes, .bytes32])

        let ca: BigInt
        let cb: Hex
        let cc: Hex

        var encoded: Hex {
            asValue.encoded
        }

        var asValue: ABI.Value {
            .tuple3(.int256(ca),
                    .bytes(cb),
                    .bytes32(cc))
        }

        static func decode(hex: Hex) throws -> Cat {
            try decodeValue(schema.decode(hex))
        }

        static func decodeValue(_ value: ABI.Value) throws -> Cat {
            switch value {
            case let .tuple3(.int256(ca),
                             .bytes(cb),
                             .bytes32(cc)):
                return try Cat(ca: ca, cb: cb, cc: cc)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    enum Animal {
        struct Moose: Equatable {
            static let schema: ABI.Schema = .tuple([.uint256])

            let b: BigUInt

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple1(.uint256(b))
            }

            static func decode(hex: Hex) throws -> Animal.Moose {
                try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Moose {
                switch value {
                case let .tuple1(.uint256(b)):
                    return try Animal.Moose(b: b)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        struct Rat: Equatable {
            static let schema: ABI.Schema = .tuple([.address])

            let a: EthAddress

            var encoded: Hex {
                asValue.encoded
            }

            var asValue: ABI.Value {
                .tuple1(.address(a))
            }

            static func decode(hex: Hex) throws -> Animal.Rat {
                try decodeValue(schema.decode(hex))
            }

            static func decodeValue(_ value: ABI.Value) throws -> Animal.Rat {
                switch value {
                case let .tuple1(.address(a)):
                    return try Animal.Rat(a: a)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    static let creationCode: Hex = "0x608060405234801561001057600080fd5b50610d74806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636fe03f9914610051578063d32850851461007a578063d7a69d4f146100ad578063eedfb21e146100d8575b600080fd5b61006461005f366004610493565b6100f9565b604051610071919061056a565b60405180910390f35b61009d6100883660046106e9565b50604080516020810190915260019081905290565b6040519015158152602001610071565b6100c06100bb366004610749565b610389565b6040516001600160a01b039091168152602001610071565b6100eb6100e6366004610a32565b6103e7565b604051908152602001610071565b6101436040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff81111561015e5761015e610656565b6040519080825280602002602001820160405280156101b657816020015b6101a360405180606001604052806000815260200160608152602001600080191681525090565b81526020019060019003908161017c5790505b50905060005b83811015610270576040518060600160405280826101d990610b43565b81526020018267ffffffffffffffff8111156101f7576101f7610656565b6040519080825280601f01601f191660200182016040528015610221576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061025d5761025d610b5f565b60209081029190910101526001016101bc565b5060008367ffffffffffffffff81111561028c5761028c610656565b6040519080825280602002602001820160405280156102b5578160200160208202803683370190505b50905060005b848110156102f2576102cd8180610c59565b8282815181106102df576102df610b5f565b60209081029190910101526001016102bb565b506040518060c00160405280866001600160601b0316815260200160018761031a9190610c65565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b81525081526020018281526020018360008151811061037357610373610b5f565b6020026020010151815250925050505b92915050565b6000805b82518110156103dd5783600001516001600160a01b03168382815181106103b6576103b6610b5f565b60200260200101516001600160a01b0316036103d55750508151610383565b60010161038d565b5060009392505050565b600080826020015183600001516001600160601b03166104079190610c78565b60130b905060005b83604001515181101561047f578360400151818151811061043257610432610b5f565b6020026020010151600001518460400151828151811061045457610454610b5f565b6020026020010151602001515161046b9190610caa565b6104759083610cda565b915060010161040f565b5061048c60011982610d02565b9392505050565b600080604083850312156104a657600080fd5b50508035926020909101359150565b6000815180845260005b818110156104db576020818501810151868301820152016104bf565b506000602082860101526020601f19601f83011685010191505092915050565b80518252600060208201516060602085015261051a60608501826104b5565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561055f57815187529582019590820190600101610543565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b818110156105f05760ff198886030183526105de8585516104fb565b945092850192918501916001016105c2565b5050505060608501519150601f198085830301608086015261061282846104b5565b925060808601519150808584030160a086015261062f838361052e565b925060a08601519150808584030160c08601525061064d82826104fb565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561068f5761068f610656565b60405290565b60405160c0810167ffffffffffffffff8111828210171561068f5761068f610656565b604051601f8201601f1916810167ffffffffffffffff811182821017156106e1576106e1610656565b604052919050565b6000602082840312156106fb57600080fd5b61070361066c565b9135825250919050565b6001600160a01b038116811461072257600080fd5b50565b600067ffffffffffffffff82111561073f5761073f610656565b5060051b60200190565b600080828403604081121561075d57600080fd5b60208082121561076c57600080fd5b61077461066c565b915084356107818161070d565b8252909250838101359067ffffffffffffffff8211156107a057600080fd5b818501915085601f8301126107b457600080fd5b81356107c76107c282610725565b6106b8565b81815260059190911b830182019082810190888311156107e657600080fd5b938301935b8285101561080d5784356107fe8161070d565b825293830193908301906107eb565b80955050505050509250929050565b80356001600160601b038116811461083357600080fd5b919050565b80356108338161070d565b600067ffffffffffffffff83111561085d5761085d610656565b610870601f8401601f19166020016106b8565b905082815283838301111561088457600080fd5b828260208301376000602084830101529392505050565b6000606082840312156108ad57600080fd5b6040516060810167ffffffffffffffff82821081831117156108d1576108d1610656565b816040528293508435835260208501359150808211156108f057600080fd5b508301601f8101851361090257600080fd5b61091185823560208401610843565b602083015250604083013560408201525092915050565b600082601f83011261093957600080fd5b813560206109496107c283610725565b82815260059290921b8401810191818101908684111561096857600080fd5b8286015b848110156109a857803567ffffffffffffffff81111561098c5760008081fd5b61099a8986838b010161089b565b84525091830191830161096c565b509695505050505050565b600082601f8301126109c457600080fd5b61048c83833560208501610843565b600082601f8301126109e457600080fd5b813560206109f46107c283610725565b8083825260208201915060208460051b870101935086841115610a1657600080fd5b602086015b848110156109a85780358352918301918301610a1b565b600060208284031215610a4457600080fd5b813567ffffffffffffffff80821115610a5c57600080fd5b9083019060c08286031215610a7057600080fd5b610a78610695565b610a818361081c565b8152610a8f60208401610838565b6020820152604083013582811115610aa657600080fd5b610ab287828601610928565b604083015250606083013582811115610aca57600080fd5b610ad6878286016109b3565b606083015250608083013582811115610aee57600080fd5b610afa878286016109d3565b60808301525060a083013582811115610b1257600080fd5b610b1e8782860161089b565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201610b5857610b58610b2d565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b80851115610bb0578160001904821115610b9657610b96610b2d565b80851615610ba357918102915b93841c9390800290610b7a565b509250929050565b600082610bc757506001610383565b81610bd457506000610383565b8160018114610bea5760028114610bf457610c10565b6001915050610383565b60ff841115610c0557610c05610b2d565b50506001821b610383565b5060208310610133831016604e8410600b8410161715610c33575081810a610383565b610c3d8383610b75565b8060001904821115610c5157610c51610b2d565b029392505050565b600061048c8383610bb8565b8181038181111561038357610383610b2d565b6001600160a01b03828116828216818102831692918115828504821417610ca157610ca1610b2d565b50505092915050565b80820260008212600160ff1b84141615610cc657610cc6610b2d565b818105831482151761038357610383610b2d565b8082018281126000831280158216821582161715610cfa57610cfa610b2d565b505092915050565b600082610d1f57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610d3957610d39610b2d565b50059056fea26469706673582212207fe8fd23263bcc8e93462912d4c64452f17a27c208822ee33afdd0b6a279f31964736f6c63430008180033"
    static let runtimeCode: Hex = "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636fe03f9914610051578063d32850851461007a578063d7a69d4f146100ad578063eedfb21e146100d8575b600080fd5b61006461005f366004610493565b6100f9565b604051610071919061056a565b60405180910390f35b61009d6100883660046106e9565b50604080516020810190915260019081905290565b6040519015158152602001610071565b6100c06100bb366004610749565b610389565b6040516001600160a01b039091168152602001610071565b6100eb6100e6366004610a32565b6103e7565b604051908152602001610071565b6101436040805160c081018252600080825260208083018290526060838501819052808401819052608084018190528451808201865283815291820152928301529060a082015290565b60008267ffffffffffffffff81111561015e5761015e610656565b6040519080825280602002602001820160405280156101b657816020015b6101a360405180606001604052806000815260200160608152602001600080191681525090565b81526020019060019003908161017c5790505b50905060005b83811015610270576040518060600160405280826101d990610b43565b81526020018267ffffffffffffffff8111156101f7576101f7610656565b6040519080825280601f01601f191660200182016040528015610221576020820181803683370190505b5081526020017f112233445566778899112233445566778899112233445566778899112233445581525082828151811061025d5761025d610b5f565b60209081029190910101526001016101bc565b5060008367ffffffffffffffff81111561028c5761028c610656565b6040519080825280602002602001820160405280156102b5578160200160208202803683370190505b50905060005b848110156102f2576102cd8180610c59565b8282815181106102df576102df610b5f565b60209081029190910101526001016102bb565b506040518060c00160405280866001600160601b0316815260200160018761031a9190610c65565b6001600160601b03166001600160a01b031681526020018381526020016040518060400160405280600581526020016468656c6c6f60d81b81525081526020018281526020018360008151811061037357610373610b5f565b6020026020010151815250925050505b92915050565b6000805b82518110156103dd5783600001516001600160a01b03168382815181106103b6576103b6610b5f565b60200260200101516001600160a01b0316036103d55750508151610383565b60010161038d565b5060009392505050565b600080826020015183600001516001600160601b03166104079190610c78565b60130b905060005b83604001515181101561047f578360400151818151811061043257610432610b5f565b6020026020010151600001518460400151828151811061045457610454610b5f565b6020026020010151602001515161046b9190610caa565b6104759083610cda565b915060010161040f565b5061048c60011982610d02565b9392505050565b600080604083850312156104a657600080fd5b50508035926020909101359150565b6000815180845260005b818110156104db576020818501810151868301820152016104bf565b506000602082860101526020601f19601f83011685010191505092915050565b80518252600060208201516060602085015261051a60608501826104b5565b604093840151949093019390935250919050565b60008151808452602080850194506020840160005b8381101561055f57815187529582019590820190600101610543565b509495945050505050565b602080825282516001600160601b031682820152828101516001600160a01b031660408084019190915283015160c06060840152805160e0840181905260009291610100600583901b86018101929184019190860190855b818110156105f05760ff198886030183526105de8585516104fb565b945092850192918501916001016105c2565b5050505060608501519150601f198085830301608086015261061282846104b5565b925060808601519150808584030160a086015261062f838361052e565b925060a08601519150808584030160c08601525061064d82826104fb565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561068f5761068f610656565b60405290565b60405160c0810167ffffffffffffffff8111828210171561068f5761068f610656565b604051601f8201601f1916810167ffffffffffffffff811182821017156106e1576106e1610656565b604052919050565b6000602082840312156106fb57600080fd5b61070361066c565b9135825250919050565b6001600160a01b038116811461072257600080fd5b50565b600067ffffffffffffffff82111561073f5761073f610656565b5060051b60200190565b600080828403604081121561075d57600080fd5b60208082121561076c57600080fd5b61077461066c565b915084356107818161070d565b8252909250838101359067ffffffffffffffff8211156107a057600080fd5b818501915085601f8301126107b457600080fd5b81356107c76107c282610725565b6106b8565b81815260059190911b830182019082810190888311156107e657600080fd5b938301935b8285101561080d5784356107fe8161070d565b825293830193908301906107eb565b80955050505050509250929050565b80356001600160601b038116811461083357600080fd5b919050565b80356108338161070d565b600067ffffffffffffffff83111561085d5761085d610656565b610870601f8401601f19166020016106b8565b905082815283838301111561088457600080fd5b828260208301376000602084830101529392505050565b6000606082840312156108ad57600080fd5b6040516060810167ffffffffffffffff82821081831117156108d1576108d1610656565b816040528293508435835260208501359150808211156108f057600080fd5b508301601f8101851361090257600080fd5b61091185823560208401610843565b602083015250604083013560408201525092915050565b600082601f83011261093957600080fd5b813560206109496107c283610725565b82815260059290921b8401810191818101908684111561096857600080fd5b8286015b848110156109a857803567ffffffffffffffff81111561098c5760008081fd5b61099a8986838b010161089b565b84525091830191830161096c565b509695505050505050565b600082601f8301126109c457600080fd5b61048c83833560208501610843565b600082601f8301126109e457600080fd5b813560206109f46107c283610725565b8083825260208201915060208460051b870101935086841115610a1657600080fd5b602086015b848110156109a85780358352918301918301610a1b565b600060208284031215610a4457600080fd5b813567ffffffffffffffff80821115610a5c57600080fd5b9083019060c08286031215610a7057600080fd5b610a78610695565b610a818361081c565b8152610a8f60208401610838565b6020820152604083013582811115610aa657600080fd5b610ab287828601610928565b604083015250606083013582811115610aca57600080fd5b610ad6878286016109b3565b606083015250608083013582811115610aee57600080fd5b610afa878286016109d3565b60808301525060a083013582811115610b1257600080fd5b610b1e8782860161089b565b60a08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201610b5857610b58610b2d565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600181815b80851115610bb0578160001904821115610b9657610b96610b2d565b80851615610ba357918102915b93841c9390800290610b7a565b509250929050565b600082610bc757506001610383565b81610bd457506000610383565b8160018114610bea5760028114610bf457610c10565b6001915050610383565b60ff841115610c0557610c05610b2d565b50506001821b610383565b5060208310610133831016604e8410600b8410161715610c33575081810a610383565b610c3d8383610b75565b8060001904821115610c5157610c51610b2d565b029392505050565b600061048c8383610bb8565b8181038181111561038357610383610b2d565b6001600160a01b03828116828216818102831692918115828504821417610ca157610ca1610b2d565b50505092915050565b80820260008212600160ff1b84141615610cc657610cc6610b2d565b818105831482151761038357610383610b2d565b8082018281126000831280158216821582161715610cfa57610cfa610b2d565b505092915050565b600082610d1f57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610d3957610d39610b2d565b50059056fea26469706673582212207fe8fd23263bcc8e93462912d4c64452f17a27c208822ee33afdd0b6a279f31964736f6c63430008180033"

    static let errors: [ABI.Function] = []
    static let acceptBatFn = ABI.Function(
        name: "acceptBat",
        inputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])],
        outputs: [.int256]
    )

    static func acceptBat(bat: Bat) throws -> BigInt {
        let query = try acceptBatFn.encoded(with: [bat.asValue])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try acceptBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.int256(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, acceptBatFn.outputTuple)
        }
    }

    static let buildBatFn = ABI.Function(
        name: "buildBat",
        inputs: [.uint256, .uint256],
        outputs: [.tuple([.uint96, .uint160, .array(Cat.schema), .string, .array(.uint256), Cat.schema])]
    )

    static func buildBat(x: BigUInt, y: BigUInt) throws -> Bat {
        let query = try buildBatFn.encoded(with: [.uint256(x), .uint256(y)])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try buildBatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.tuple6(.uint96(a),
                                 .uint160(b),
                                 .array(Cat.schema, c),
                                 .string(d),
                                 .array(.uint256, e),
                                 f)):
            return try Bat(a: a, b: b, c: c.map { try Cat.decodeValue($0) }, d: d, e: e.map { $0.asBigUInt! }, f: Cat.decodeValue(f))
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, buildBatFn.outputTuple)
        }
    }

    static let lookAtMooseFn = ABI.Function(
        name: "lookAtMoose",
        inputs: [.tuple([.uint256])],
        outputs: [.bool]
    )

    static func lookAtMoose(moose: Animal.Moose) throws -> Bool {
        let query = try lookAtMooseFn.encoded(with: [moose.asValue])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try lookAtMooseFn.decode(output: result)

        switch decoded {
        case let .tuple1(.bool(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtMooseFn.outputTuple)
        }
    }

    static let lookAtRatFn = ABI.Function(
        name: "lookAtRat",
        inputs: [.tuple([.address]), .array(.address)],
        outputs: [.address]
    )

    static func lookAtRat(rat: Animal.Rat, holes: [EthAddress]) throws -> EthAddress {
        let query = try lookAtRatFn.encoded(with: [rat.asValue, .array(.address, holes.map { .address($0) })])
        let result = try EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors)
        let decoded = try lookAtRatFn.decode(output: result)

        switch decoded {
        case let .tuple1(.address(var0)):
            return var0
        default:
            throw ABI.DecodeError.mismatchedType(decoded.schema, lookAtRatFn.outputTuple)
        }
    }
}
